Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 115):
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token "data" ()
Shifting token "data" ()
Entering state 5
Stack now 0 2 5
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 10
Stack now 0 2 5 10
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 15
Stack now 0 2 5 10 15
Reducing stack by rule 8 (line 134):
-> $$ = nterm field_list ()
Entering state 19
Stack now 0 2 5 10 15 19
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 31
Stack now 0 2 5 10 15 19 31
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 39
Stack now 0 2 5 10 15 19 31 39
Reading a token
Next token is token "Char" ()
Shifting token "Char" ()
Entering state 23
Stack now 0 2 5 10 15 19 31 39 23
Reducing stack by rule 55 (line 258):
   $1 = token "Char" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 5 10 15 19 31 39 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 43
Stack now 0 2 5 10 15 19 31 39 43
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 73
Stack now 0 2 5 10 15 19 31 39 43 73
Reducing stack by rule 10 (line 139):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
   $4 = token ';' ()
-> $$ = nterm field_decl ()
Entering state 33
Stack now 0 2 5 10 15 19 33
Reducing stack by rule 9 (line 135):
   $1 = nterm field_list ()
   $2 = nterm field_decl ()
-> $$ = nterm field_list ()
Entering state 19
Stack now 0 2 5 10 15 19
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 31
Stack now 0 2 5 10 15 19 31
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 39
Stack now 0 2 5 10 15 19 31 39
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 5 10 15 19 31 39 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 5 10 15 19 31 39 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 43
Stack now 0 2 5 10 15 19 31 39 43
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 73
Stack now 0 2 5 10 15 19 31 39 43 73
Reducing stack by rule 10 (line 139):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
   $4 = token ';' ()
-> $$ = nterm field_decl ()
Entering state 33
Stack now 0 2 5 10 15 19 33
Reducing stack by rule 9 (line 135):
   $1 = nterm field_list ()
   $2 = nterm field_decl ()
-> $$ = nterm field_list ()
Entering state 19
Stack now 0 2 5 10 15 19
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 32
Stack now 0 2 5 10 15 19 32
Reducing stack by rule 7 (line 130):
   $1 = token "data" ()
   $2 = token T_TYID ()
   $3 = token '{' ()
   $4 = nterm field_list ()
   $5 = token '}' ()
-> $$ = nterm data_def ()
Entering state 8
Stack now 0 2 8
Reducing stack by rule 5 (line 121):
   $1 = nterm data_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token "data" ()
Shifting token "data" ()
Entering state 5
Stack now 0 2 5
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 10
Stack now 0 2 5 10
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 15
Stack now 0 2 5 10 15
Reducing stack by rule 8 (line 134):
-> $$ = nterm field_list ()
Entering state 19
Stack now 0 2 5 10 15 19
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 31
Stack now 0 2 5 10 15 19 31
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 39
Stack now 0 2 5 10 15 19 31 39
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 5 10 15 19 31 39 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 5 10 15 19 31 39 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 43
Stack now 0 2 5 10 15 19 31 39 43
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 34
Stack now 0 2 5 10 15 19 31 39 43 34
Reading a token
Next token is token ']' ()
Shifting token ']' ()
Entering state 40
Stack now 0 2 5 10 15 19 31 39 43 34 40
Reducing stack by rule 52 (line 252):
   $1 = nterm type ()
   $2 = token '[' ()
   $3 = token ']' ()
-> $$ = nterm type ()
Entering state 43
Stack now 0 2 5 10 15 19 31 39 43
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 34
Stack now 0 2 5 10 15 19 31 39 43 34
Reading a token
Next token is token ']' ()
Shifting token ']' ()
Entering state 40
Stack now 0 2 5 10 15 19 31 39 43 34 40
Reducing stack by rule 52 (line 252):
   $1 = nterm type ()
   $2 = token '[' ()
   $3 = token ']' ()
-> $$ = nterm type ()
Entering state 43
Stack now 0 2 5 10 15 19 31 39 43
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 73
Stack now 0 2 5 10 15 19 31 39 43 73
Reducing stack by rule 10 (line 139):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
   $4 = token ';' ()
-> $$ = nterm field_decl ()
Entering state 33
Stack now 0 2 5 10 15 19 33
Reducing stack by rule 9 (line 135):
   $1 = nterm field_list ()
   $2 = nterm field_decl ()
-> $$ = nterm field_list ()
Entering state 19
Stack now 0 2 5 10 15 19
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 31
Stack now 0 2 5 10 15 19 31
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 39
Stack now 0 2 5 10 15 19 31 39
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 5 10 15 19 31 39 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 5 10 15 19 31 39 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 43
Stack now 0 2 5 10 15 19 31 39 43
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 34
Stack now 0 2 5 10 15 19 31 39 43 34
Reading a token
Next token is token ']' ()
Shifting token ']' ()
Entering state 40
Stack now 0 2 5 10 15 19 31 39 43 34 40
Reducing stack by rule 52 (line 252):
   $1 = nterm type ()
   $2 = token '[' ()
   $3 = token ']' ()
-> $$ = nterm type ()
Entering state 43
Stack now 0 2 5 10 15 19 31 39 43
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 73
Stack now 0 2 5 10 15 19 31 39 43 73
Reducing stack by rule 10 (line 139):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
   $4 = token ';' ()
-> $$ = nterm field_decl ()
Entering state 33
Stack now 0 2 5 10 15 19 33
Reducing stack by rule 9 (line 135):
   $1 = nterm field_list ()
   $2 = nterm field_decl ()
-> $$ = nterm field_list ()
Entering state 19
Stack now 0 2 5 10 15 19
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 31
Stack now 0 2 5 10 15 19 31
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 39
Stack now 0 2 5 10 15 19 31 39
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 5 10 15 19 31 39 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 5 10 15 19 31 39 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 43
Stack now 0 2 5 10 15 19 31 39 43
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 73
Stack now 0 2 5 10 15 19 31 39 43 73
Reducing stack by rule 10 (line 139):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
   $4 = token ';' ()
-> $$ = nterm field_decl ()
Entering state 33
Stack now 0 2 5 10 15 19 33
Reducing stack by rule 9 (line 135):
   $1 = nterm field_list ()
   $2 = nterm field_decl ()
-> $$ = nterm field_list ()
Entering state 19
Stack now 0 2 5 10 15 19
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 31
Stack now 0 2 5 10 15 19 31
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 39
Stack now 0 2 5 10 15 19 31 39
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 5 10 15 19 31 39 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 5 10 15 19 31 39 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 43
Stack now 0 2 5 10 15 19 31 39 43
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 73
Stack now 0 2 5 10 15 19 31 39 43 73
Reducing stack by rule 10 (line 139):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
   $4 = token ';' ()
-> $$ = nterm field_decl ()
Entering state 33
Stack now 0 2 5 10 15 19 33
Reducing stack by rule 9 (line 135):
   $1 = nterm field_list ()
   $2 = nterm field_decl ()
-> $$ = nterm field_list ()
Entering state 19
Stack now 0 2 5 10 15 19
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 32
Stack now 0 2 5 10 15 19 32
Reducing stack by rule 7 (line 130):
   $1 = token "data" ()
   $2 = token T_TYID ()
   $3 = token '{' ()
   $4 = nterm field_list ()
   $5 = token '}' ()
-> $$ = nterm data_def ()
Entering state 8
Stack now 0 2 8
Reducing stack by rule 5 (line 121):
   $1 = nterm data_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token ':' ()
Shifting token ':' ()
Entering state 28
Stack now 0 2 4 9 12 17 28
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 12 17 28 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 36
Stack now 0 2 4 9 12 17 28 36
Reading a token
Next token is token '{' ()
Reducing stack by rule 18 (line 162):
   $1 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token '{' ()
Reducing stack by rule 17 (line 158):
   $1 = token ':' ()
   $2 = nterm type_list_non_empty ()
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token "new" ()
Shifting token "new" ()
Entering state 57
Stack now 0 2 4 9 12 17 29 37 42 69 90 57
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 87
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87
Reading a token
Next token is token ';' ()
Reducing stack by rule 85 (line 300):
   $1 = token "new" ()
   $2 = nterm atomic_type ()
-> $$ = nterm new_expression ()
Entering state 72
Stack now 0 2 4 9 12 17 29 37 42 69 90 72
Reducing stack by rule 84 (line 296):
   $1 = nterm new_expression ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token "new" ()
Shifting token "new" ()
Entering state 57
Stack now 0 2 4 9 12 17 29 37 42 69 90 57
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 87
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 116
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116
Reading a token
Next token is token ']' ()
Reducing stack by rule 89 (line 314):
-> $$ = nterm optional_expression ()
Entering state 140
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 140
Next token is token ']' ()
Shifting token ']' ()
Entering state 150
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 140 150
Reducing stack by rule 87 (line 307):
   $1 = token '[' ()
   $2 = nterm optional_expression ()
   $3 = token ']' ()
-> $$ = nterm dim_list ()
Entering state 117
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 117
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 141
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 117 141
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 117 141 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 117 141 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 117 141 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 117 141 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 139
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 117 141 139
Next token is token ']' ()
Reducing stack by rule 90 (line 315):
   $1 = nterm expression ()
-> $$ = nterm optional_expression ()
Entering state 151
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 117 141 151
Next token is token ']' ()
Shifting token ']' ()
Entering state 157
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 117 141 151 157
Reducing stack by rule 88 (line 309):
   $1 = nterm dim_list ()
   $2 = token '[' ()
   $3 = nterm optional_expression ()
   $4 = token ']' ()
-> $$ = nterm dim_list ()
Entering state 117
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 117
Reading a token
Next token is token ';' ()
Reducing stack by rule 86 (line 302):
   $1 = token "new" ()
   $2 = nterm atomic_type ()
   $3 = nterm dim_list ()
-> $$ = nterm new_expression ()
Entering state 72
Stack now 0 2 4 9 12 17 29 37 42 69 90 72
Reducing stack by rule 84 (line 296):
   $1 = nterm new_expression ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token "new" ()
Shifting token "new" ()
Entering state 57
Stack now 0 2 4 9 12 17 29 37 42 69 90 57
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 87
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 116
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 139
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 139
Next token is token ']' ()
Reducing stack by rule 90 (line 315):
   $1 = nterm expression ()
-> $$ = nterm optional_expression ()
Entering state 140
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 140
Next token is token ']' ()
Shifting token ']' ()
Entering state 150
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 140 150
Reducing stack by rule 87 (line 307):
   $1 = token '[' ()
   $2 = nterm optional_expression ()
   $3 = token ']' ()
-> $$ = nterm dim_list ()
Entering state 117
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 117
Reading a token
Next token is token ';' ()
Reducing stack by rule 86 (line 302):
   $1 = token "new" ()
   $2 = nterm atomic_type ()
   $3 = nterm dim_list ()
-> $$ = nterm new_expression ()
Entering state 72
Stack now 0 2 4 9 12 17 29 37 42 69 90 72
Reducing stack by rule 84 (line 296):
   $1 = nterm new_expression ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "iterate" ()
Shifting token "iterate" ()
Entering state 56
Stack now 0 2 4 9 12 17 29 37 42 56
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 86
Stack now 0 2 4 9 12 17 29 37 42 56 86
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 114
Stack now 0 2 4 9 12 17 29 37 42 56 86 114
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 115
Stack now 0 2 4 9 12 17 29 37 42 56 86 115
Next token is token ')' ()
Shifting token ')' ()
Entering state 138
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Reading a token
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130
Next token is token ';' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 149
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 149
Reducing stack by rule 44 (line 227):
   $1 = token "iterate" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm iterate_cmd ()
Entering state 66
Stack now 0 2 4 9 12 17 29 37 42 66
Reducing stack by rule 25 (line 175):
   $1 = nterm iterate_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 11 16 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 13 18 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token '{' ()
Reducing stack by rule 16 (line 157):
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 70 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 70 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 70 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 70 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 131
Next token is token ';' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 11 16 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 13 18 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token ':' ()
Shifting token ':' ()
Entering state 28
Stack now 0 2 4 9 12 17 28
Reading a token
Next token is token "Bool" ()
Shifting token "Bool" ()
Entering state 22
Stack now 0 2 4 9 12 17 28 22
Reducing stack by rule 54 (line 257):
   $1 = token "Bool" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 36
Stack now 0 2 4 9 12 17 28 36
Reading a token
Next token is token '{' ()
Reducing stack by rule 18 (line 162):
   $1 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token '{' ()
Reducing stack by rule 17 (line 158):
   $1 = token ':' ()
   $2 = nterm type_list_non_empty ()
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 54 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 54 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 54 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 54 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 54 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Reading a token
Next token is token '<' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token '<' ()
Shifting token '<' ()
Entering state 102
Stack now 0 2 4 9 12 17 29 37 42 54 84 102
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 54 84 102 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 84 102 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 84 102 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 54 84 102 128
Next token is token ';' ()
Reducing stack by rule 65 (line 271):
   $1 = nterm expression ()
   $2 = token '<' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 11 16 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 13 18 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 13 18 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token '{' ()
Reducing stack by rule 16 (line 157):
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 70 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 70 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 70 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 70 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token "new" ()
Shifting token "new" ()
Entering state 57
Stack now 0 2 4 9 12 17 29 37 42 69 90 57
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 87
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 116
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 139
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 139
Next token is token ']' ()
Reducing stack by rule 90 (line 315):
   $1 = nterm expression ()
-> $$ = nterm optional_expression ()
Entering state 140
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 140
Next token is token ']' ()
Shifting token ']' ()
Entering state 150
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 140 150
Reducing stack by rule 87 (line 307):
   $1 = token '[' ()
   $2 = nterm optional_expression ()
   $3 = token ']' ()
-> $$ = nterm dim_list ()
Entering state 117
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 117
Reading a token
Next token is token ';' ()
Reducing stack by rule 86 (line 302):
   $1 = token "new" ()
   $2 = nterm atomic_type ()
   $3 = nterm dim_list ()
-> $$ = nterm new_expression ()
Entering state 72
Stack now 0 2 4 9 12 17 29 37 42 69 90 72
Reducing stack by rule 84 (line 296):
   $1 = nterm new_expression ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 70 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 70 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 70 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 70 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 104
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 104 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 104 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 104 130
Next token is token ';' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 11 16 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 13 18 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Char" ()
Shifting token "Char" ()
Entering state 23
Stack now 0 2 4 9 13 18 11 16 23
Reducing stack by rule 55 (line 258):
   $1 = token "Char" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 13 18 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token '{' ()
Reducing stack by rule 16 (line 157):
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_TRUE ()
Shifting token T_TRUE ()
Entering state 49
Stack now 0 2 4 9 12 17 29 37 42 69 90 49
Reducing stack by rule 80 (line 292):
   $1 = token T_TRUE ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "iterate" ()
Shifting token "iterate" ()
Entering state 56
Stack now 0 2 4 9 12 17 29 37 42 56
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 86
Stack now 0 2 4 9 12 17 29 37 42 56 86
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 114
Stack now 0 2 4 9 12 17 29 37 42 56 86 114
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 56 86 114 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 81
Reading a token
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 115
Stack now 0 2 4 9 12 17 29 37 42 56 86 115
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 105
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 105 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 105 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 105 131
Next token is token ')' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 115
Stack now 0 2 4 9 12 17 29 37 42 56 86 115
Next token is token ')' ()
Shifting token ')' ()
Entering state 138
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81
Reading a token
Next token is token "==" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113
Next token is token "==" ()
Shifting token "==" ()
Entering state 100
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 100
Reading a token
Next token is token "null" ()
Shifting token "null" ()
Entering state 51
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 100 51
Reducing stack by rule 82 (line 294):
   $1 = token "null" ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 100 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 100 81
Reading a token
Next token is token "&&" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 126
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 100 126
Next token is token "&&" ()
Reducing stack by rule 63 (line 269):
   $1 = nterm expression ()
   $2 = token "==" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113
Next token is token "&&" ()
Shifting token "&&" ()
Entering state 99
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 125
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125
Next token is token ')' ()
Reducing stack by rule 62 (line 268):
   $1 = nterm expression ()
   $2 = token "&&" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Reading a token
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Reading a token
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90
Reading a token
Next token is token "new" ()
Shifting token "new" ()
Entering state 57
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 57
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 57 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 87
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 57 87
Reading a token
Next token is token ';' ()
Reducing stack by rule 85 (line 300):
   $1 = token "new" ()
   $2 = nterm atomic_type ()
-> $$ = nterm new_expression ()
Entering state 72
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 72
Reducing stack by rule 84 (line 296):
   $1 = nterm new_expression ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Reading a token
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Reading a token
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Reading a token
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Reading a token
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Reading a token
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Reading a token
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90
Reading a token
Next token is token T_FALSE ()
Shifting token T_FALSE ()
Entering state 50
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 50
Reducing stack by rule 81 (line 293):
   $1 = token T_FALSE ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 147
Reading a token
Next token is token T_ID ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130
Next token is token ';' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 149
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 149
Reducing stack by rule 44 (line 227):
   $1 = token "iterate" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm iterate_cmd ()
Entering state 66
Stack now 0 2 4 9 12 17 29 37 42 66
Reducing stack by rule 25 (line 175):
   $1 = nterm iterate_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token ':' ()
Shifting token ':' ()
Entering state 28
Stack now 0 2 4 9 12 17 28
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 12 17 28 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 36
Stack now 0 2 4 9 12 17 28 36
Reading a token
Next token is token '{' ()
Reducing stack by rule 18 (line 162):
   $1 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token '{' ()
Reducing stack by rule 17 (line 158):
   $1 = token ':' ()
   $2 = nterm type_list_non_empty ()
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Reading a token
Next token is token '<' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token '<' ()
Shifting token '<' ()
Entering state 102
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 128
Next token is token ')' ()
Reducing stack by rule 65 (line 271):
   $1 = nterm expression ()
   $2 = token '<' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147
Reading a token
Next token is token "return" ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 54
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 54 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Reading a token
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 54 84 105
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 84 105 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 84 105 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 84 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 84 105 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 54 84 105 131
Next token is token ';' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 11 16 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token '{' ()
Reducing stack by rule 16 (line 157):
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "iterate" ()
Shifting token "iterate" ()
Entering state 56
Stack now 0 2 4 9 12 17 29 37 42 56
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 86
Stack now 0 2 4 9 12 17 29 37 42 56 86
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 114
Stack now 0 2 4 9 12 17 29 37 42 56 86 114
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 115
Stack now 0 2 4 9 12 17 29 37 42 56 86 115
Next token is token ')' ()
Shifting token ')' ()
Entering state 138
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 94 112 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 94 112 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 147
Reading a token
Next token is token "print" ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 81
Reading a token
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 80
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 80 105
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 80 105 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 80 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 80 105 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 80 105 131
Next token is token ';' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 81
Reading a token
Next token is token "!=" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113
Next token is token "!=" ()
Shifting token "!=" ()
Entering state 101
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 101
Reading a token
Next token is token "null" ()
Shifting token "null" ()
Entering state 51
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 101 51
Reducing stack by rule 82 (line 294):
   $1 = token "null" ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 101 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 101 81
Reading a token
Next token is token "&&" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 127
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 101 127
Next token is token "&&" ()
Reducing stack by rule 64 (line 270):
   $1 = nterm expression ()
   $2 = token "!=" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113
Next token is token "&&" ()
Shifting token "&&" ()
Entering state 99
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 81
Reading a token
Next token is token '<' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 125
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125
Next token is token '<' ()
Shifting token '<' ()
Entering state 102
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 81
Reading a token
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 128
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 128 105
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 128 105 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 128 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 128 105 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 128 105 131
Next token is token ')' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125 102 128
Next token is token ')' ()
Reducing stack by rule 65 (line 271):
   $1 = nterm expression ()
   $2 = token '<' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 125
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 99 125
Next token is token ')' ()
Reducing stack by rule 62 (line 268):
   $1 = nterm expression ()
   $2 = token "&&" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token "iterate" ()
Shifting token "iterate" ()
Entering state 56
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 86
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 114
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 114 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 81
Reading a token
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 115
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 105
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 105 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 105 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 105 131
Next token is token ')' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 115
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115
Next token is token ')' ()
Shifting token ')' ()
Entering state 138
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81
Reading a token
Next token is token "!=" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113
Next token is token "!=" ()
Shifting token "!=" ()
Entering state 101
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 101
Reading a token
Next token is token "null" ()
Shifting token "null" ()
Entering state 51
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 101 51
Reducing stack by rule 82 (line 294):
   $1 = token "null" ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 101 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 101 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 127
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 101 127
Next token is token ')' ()
Reducing stack by rule 64 (line 270):
   $1 = nterm expression ()
   $2 = token "!=" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119 104
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119 104 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119 104 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119 104 130
Next token is token ';' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 147
Reading a token
Next token is token '}' ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 149
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 56 86 115 138 149
Reducing stack by rule 44 (line 227):
   $1 = token "iterate" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm iterate_cmd ()
Entering state 66
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 66
Reducing stack by rule 25 (line 175):
   $1 = nterm iterate_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 55 85 113 136 147
Reading a token
Next token is token "print" ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130
Next token is token ';' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 149
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 149
Reducing stack by rule 44 (line 227):
   $1 = token "iterate" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm iterate_cmd ()
Entering state 66
Stack now 0 2 4 9 12 17 29 37 42 66
Reducing stack by rule 25 (line 175):
   $1 = nterm iterate_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 11 16 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 13 18 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Char" ()
Shifting token "Char" ()
Entering state 23
Stack now 0 2 4 9 13 18 11 16 23
Reducing stack by rule 55 (line 258):
   $1 = token "Char" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token ':' ()
Shifting token ':' ()
Entering state 28
Stack now 0 2 4 9 12 17 28
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 12 17 28 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 36
Stack now 0 2 4 9 12 17 28 36
Reading a token
Next token is token '{' ()
Reducing stack by rule 18 (line 162):
   $1 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token '{' ()
Reducing stack by rule 17 (line 158):
   $1 = token ':' ()
   $2 = nterm type_list_non_empty ()
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 55 85 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 55 85 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 55 85 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Reading a token
Next token is token "!=" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token "!=" ()
Shifting token "!=" ()
Entering state 101
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 101
Reading a token
Next token is token "null" ()
Shifting token "null" ()
Entering state 51
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 101 51
Reducing stack by rule 82 (line 294):
   $1 = token "null" ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 101 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 101 81
Reading a token
Next token is token "&&" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 127
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 101 127
Next token is token "&&" ()
Reducing stack by rule 64 (line 270):
   $1 = nterm expression ()
   $2 = token "!=" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token "&&" ()
Shifting token "&&" ()
Entering state 99
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 81
Reading a token
Next token is token '<' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 125
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125
Next token is token '<' ()
Shifting token '<' ()
Entering state 102
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 81
Reading a token
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 128
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 128 105
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 128 105 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 128 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 128 105 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 128 105 131
Next token is token ')' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125 102 128
Next token is token ')' ()
Reducing stack by rule 65 (line 271):
   $1 = nterm expression ()
   $2 = token '<' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 125
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 99 125
Next token is token ')' ()
Reducing stack by rule 62 (line 268):
   $1 = nterm expression ()
   $2 = token "&&" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "iterate" ()
Shifting token "iterate" ()
Entering state 56
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 86
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 114
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 81
Reading a token
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 115
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 105
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 105 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 105 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 105 131
Next token is token ')' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 115
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115
Next token is token ')' ()
Shifting token ')' ()
Entering state 138
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81
Reading a token
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 81
Reading a token
Next token is token "==" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113
Next token is token "==" ()
Shifting token "==" ()
Entering state 100
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 100
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 100 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 100 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 100 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 100 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 126
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 100 126
Next token is token ')' ()
Reducing stack by rule 63 (line 269):
   $1 = nterm expression ()
   $2 = token "==" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81
Reading a token
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 55 85 113 136 147
Reading a token
Next token is token T_ID ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 119
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 119 104
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 119 104 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 119 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 119 104 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 119 104 130
Next token is token ';' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 149
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 149
Reducing stack by rule 44 (line 227):
   $1 = token "iterate" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm iterate_cmd ()
Entering state 66
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 66
Reducing stack by rule 25 (line 175):
   $1 = nterm iterate_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147
Reading a token
Next token is token "return" ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 54
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 54 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Reading a token
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 54 84 105
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 54 84 105 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 84 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 84 105 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 54 84 105 131
Next token is token ';' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 11 16 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 13 18 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 13 18 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 13 18 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Char" ()
Shifting token "Char" ()
Entering state 23
Stack now 0 2 4 9 13 18 11 16 23
Reducing stack by rule 55 (line 258):
   $1 = token "Char" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 34
Stack now 0 2 4 9 13 18 11 16 26 34
Reading a token
Next token is token ']' ()
Shifting token ']' ()
Entering state 40
Stack now 0 2 4 9 13 18 11 16 26 34 40
Reducing stack by rule 52 (line 252):
   $1 = nterm type ()
   $2 = token '[' ()
   $3 = token ']' ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token ':' ()
Shifting token ':' ()
Entering state 28
Stack now 0 2 4 9 12 17 28
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 12 17 28 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 36
Stack now 0 2 4 9 12 17 28 36
Reading a token
Next token is token '{' ()
Reducing stack by rule 18 (line 162):
   $1 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token '{' ()
Reducing stack by rule 17 (line 158):
   $1 = token ':' ()
   $2 = nterm type_list_non_empty ()
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 76
Reading a token
Next token is token '<' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Next token is token '<' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token '<' ()
Shifting token '<' ()
Entering state 102
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 128
Next token is token ')' ()
Reducing stack by rule 65 (line 271):
   $1 = nterm expression ()
   $2 = token '<' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 76
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 81
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135 104
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135 104 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135 104 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135 104 130
Next token is token ',' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147
Reading a token
Next token is token "return" ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 11 16 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Char" ()
Shifting token "Char" ()
Entering state 23
Stack now 0 2 4 9 13 18 11 16 23
Reducing stack by rule 55 (line 258):
   $1 = token "Char" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 34
Stack now 0 2 4 9 13 18 11 16 26 34
Reading a token
Next token is token ']' ()
Shifting token ']' ()
Entering state 40
Stack now 0 2 4 9 13 18 11 16 26 34 40
Reducing stack by rule 52 (line 252):
   $1 = nterm type ()
   $2 = token '[' ()
   $3 = token ']' ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 13 18 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token ':' ()
Shifting token ':' ()
Entering state 28
Stack now 0 2 4 9 12 17 28
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 12 17 28 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 36
Stack now 0 2 4 9 12 17 28 36
Reading a token
Next token is token '{' ()
Reducing stack by rule 18 (line 162):
   $1 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token '{' ()
Reducing stack by rule 17 (line 158):
   $1 = token ':' ()
   $2 = nterm type_list_non_empty ()
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 54 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token ')' ()
Reducing stack by rule 11 (line 143):
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token ':' ()
Shifting token ':' ()
Entering state 28
Stack now 0 2 4 9 12 17 28
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 12 17 28 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 36
Stack now 0 2 4 9 12 17 28 36
Reading a token
Next token is token '{' ()
Reducing stack by rule 18 (line 162):
   $1 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token '{' ()
Reducing stack by rule 17 (line 158):
   $1 = token ':' ()
   $2 = nterm type_list_non_empty ()
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token ')' ()
Reducing stack by rule 11 (line 143):
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token '{' ()
Reducing stack by rule 16 (line 157):
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96
Reading a token
Next token is token ')' ()
Reducing stack by rule 40 (line 215):
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token "new" ()
Shifting token "new" ()
Entering state 57
Stack now 0 2 4 9 12 17 29 37 42 69 90 57
Reading a token
Next token is token "Char" ()
Shifting token "Char" ()
Entering state 23
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 23
Reducing stack by rule 55 (line 258):
   $1 = token "Char" ()
-> $$ = nterm atomic_type ()
Entering state 87
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 116
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 139
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 139
Next token is token ']' ()
Reducing stack by rule 90 (line 315):
   $1 = nterm expression ()
-> $$ = nterm optional_expression ()
Entering state 140
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 140
Next token is token ']' ()
Shifting token ']' ()
Entering state 150
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 140 150
Reducing stack by rule 87 (line 307):
   $1 = token '[' ()
   $2 = nterm optional_expression ()
   $3 = token ']' ()
-> $$ = nterm dim_list ()
Entering state 117
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 117
Reading a token
Next token is token ';' ()
Reducing stack by rule 86 (line 302):
   $1 = token "new" ()
   $2 = nterm atomic_type ()
   $3 = nterm dim_list ()
-> $$ = nterm new_expression ()
Entering state 72
Stack now 0 2 4 9 12 17 29 37 42 69 90 72
Reducing stack by rule 84 (line 296):
   $1 = nterm new_expression ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 70 92
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 70 92 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 70 92 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 69 90 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 70 92
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 70 92 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 70 92 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 69 90 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 70 92
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 70 92 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 70 92 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 69 90 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 70 92
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 70 92 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 70 92 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 69 90 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 52 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 52 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 52 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94 112 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94 112 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 70 92
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 70 92 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 70 92 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 69 90 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 70 92
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 70 92 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 70 92 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 69 90 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 70 92
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 70 92 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 70 92 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 69 90 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 70 92
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 70 92 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 70 92 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 69 90 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 135
Next token is token ',' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 52 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 52 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 52 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94 112 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94 112 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 111):
   $1 = nterm def_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
[TC] visit AssignCmdNode
[TC] visit NewExprNode
[TC] RHS=AFD
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] LHS=Array[Array[Transition]]
[TC] visit NewExprNode
[TC] RHS=Array[Array[Transition]]
[TC] visit AssignCmdNode
[TC] LHS=Array[Int]
[TC] visit NewExprNode
[TC] RHS=Array[Int]
[TC] visit AssignCmdNode
[TC] RHS=Int
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] LHS=Int
[TC] RHS=Int
[TC] visit AssignCmdNode
[TC] LHS=Int
[TC] RHS=Int
[TC] visit ReturnCmdNode
[TC] visit AssignCmdNode
[TC] LHS=Int
[TC] RHS=Int
[TC] visit ReturnCmdNode
[TC] visit AssignCmdNode
[TC] LHS=Array[Transition]
[TC] visit NewExprNode
[TC] RHS=Array[Transition]
[TC] visit AssignCmdNode
[TC] LHS=Int
[TC] RHS=Int
[TC] visit AssignCmdNode
[TC] RHS=Int
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=Bool
[TC] LHS(var)=‹unknown›
[TC] visit ReturnCmdNode
[TC] visit ReturnCmdNode
[TC] visit AssignCmdNode
[TC] RHS=Int
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=Int
[TC] LHS(var)=‹unknown›
[TC] visit ReturnCmdNode
[TC] visit ReturnCmdNode
[TC] visit ReturnCmdNode
[TC] visit ReturnCmdNode
[TC] visit AssignCmdNode
[TC] RHS=AFD
[TC] LHS(var)=‹unknown›
[TC] visit ReturnCmdNode
[TC] visit AssignCmdNode
[TC] RHS=AFD
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] visit NewExprNode
[TC] RHS=Array[Char]
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=Int
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] LHS=Char
[TC] RHS=Char
[TC] visit AssignCmdNode
[TC] LHS=Char
[TC] RHS=Char
[TC] visit AssignCmdNode
[TC] LHS=Char
[TC] RHS=Char
[TC] visit AssignCmdNode
[TC] LHS=Char
[TC] RHS=Char
[TC] visit AssignCmdNode
[TC] RHS=Int
[TC] LHS(var)=Int
[TC] visit AssignCmdNode
[TC] LHS=Char
[TC] RHS=Char
[TC] visit AssignCmdNode
[TC] LHS=Char
[TC] RHS=Char
[TC] visit AssignCmdNode
[TC] LHS=Char
[TC] RHS=Char
[TC] visit AssignCmdNode
[TC] LHS=Char
[TC] RHS=Char
[TC] visit AssignCmdNode
[TC] RHS=Int
[TC] LHS(var)=Int
[TC] fun abs returns [Int]
[TC] fun addTransition returns []
[TC] fun delta returns [Int]
[TC] fun isFinal returns [Bool]
[TC] fun main returns []
[TC] fun mkAutomata returns [AFD]
[TC] fun myAFD returns [AFD]
[TC] fun printAutomata returns []
[TC] fun runAFD returns [Int]
[TC] fun runAFDHelper returns [Int]
[TC] fun setFinal returns []
[TC] fun setNumTransitions returns []
[TRACE] CallCmd main
[TRACE] CallExpr myAFD
[TRACE] CallExpr mkAutomata
[TRACE] IntLiteral 3
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'AFD'.
[TRACE] New record: Record
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[TRACE] VarAccess numStates
[TRACE] VarValue Int
[TRACE] New array (com nullptrs) size=3
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[TRACE] VarAccess numStates
[TRACE] VarValue Int
[TRACE] New primitive array size=3
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] IntLiteral 0
[TRACE] VarAccess numStates
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] IntLiteral 1
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] IntLiteral 1
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess numStates
[TRACE] VarValue Int
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] IntLiteral 0
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] CallCmd setNumTransitions
[TRACE] VarAccess afd
[TRACE] VarValue Record
[TRACE] IntLiteral 0
[TRACE] IntLiteral 2
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] New array (com nullptrs) size=2
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] CallCmd addTransition
[TRACE] VarAccess afd
[TRACE] VarValue Record
[TRACE] IntLiteral 0
[TRACE] CharLiteral a
[TRACE] IntLiteral 0
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op==
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: null
[TRACE] VarAccess add
[TRACE] VarValue Bool
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Transition'.
[TRACE] New record: Record
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] VarAccess a
[TRACE] VarValue Char
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] VarAccess d
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op==
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: null
[TRACE] VarAccess add
[TRACE] VarValue Bool
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CallCmd addTransition
[TRACE] VarAccess afd
[TRACE] VarValue Record
[TRACE] IntLiteral 0
[TRACE] CharLiteral b
[TRACE] IntLiteral 1
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op==
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] VarAccess add
[TRACE] VarValue Bool
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op==
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: null
[TRACE] VarAccess add
[TRACE] VarValue Bool
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Transition'.
[TRACE] New record: Record
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] VarAccess a
[TRACE] VarValue Char
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] VarAccess d
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CallCmd setNumTransitions
[TRACE] VarAccess afd
[TRACE] VarValue Record
[TRACE] IntLiteral 1
[TRACE] IntLiteral 2
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] New array (com nullptrs) size=2
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] CallCmd addTransition
[TRACE] VarAccess afd
[TRACE] VarValue Record
[TRACE] IntLiteral 1
[TRACE] CharLiteral a
[TRACE] IntLiteral 0
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op==
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: null
[TRACE] VarAccess add
[TRACE] VarValue Bool
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Transition'.
[TRACE] New record: Record
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] VarAccess a
[TRACE] VarValue Char
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] VarAccess d
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op==
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: null
[TRACE] VarAccess add
[TRACE] VarValue Bool
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CallCmd addTransition
[TRACE] VarAccess afd
[TRACE] VarValue Record
[TRACE] IntLiteral 1
[TRACE] CharLiteral b
[TRACE] IntLiteral 2
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op==
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] VarAccess add
[TRACE] VarValue Bool
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op==
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: null
[TRACE] VarAccess add
[TRACE] VarValue Bool
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Transition'.
[TRACE] New record: Record
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] VarAccess a
[TRACE] VarValue Char
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] VarAccess d
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CallCmd setNumTransitions
[TRACE] VarAccess afd
[TRACE] VarValue Record
[TRACE] IntLiteral 2
[TRACE] IntLiteral 2
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] New array (com nullptrs) size=2
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] CallCmd addTransition
[TRACE] VarAccess afd
[TRACE] VarValue Record
[TRACE] IntLiteral 2
[TRACE] CharLiteral a
[TRACE] IntLiteral 2
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op==
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: null
[TRACE] VarAccess add
[TRACE] VarValue Bool
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Transition'.
[TRACE] New record: Record
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] VarAccess a
[TRACE] VarValue Char
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] VarAccess d
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op==
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: null
[TRACE] VarAccess add
[TRACE] VarValue Bool
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CallCmd addTransition
[TRACE] VarAccess afd
[TRACE] VarValue Record
[TRACE] IntLiteral 2
[TRACE] CharLiteral b
[TRACE] IntLiteral 2
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op==
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] VarAccess add
[TRACE] VarValue Bool
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op==
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: null
[TRACE] VarAccess add
[TRACE] VarValue Bool
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Transition'.
[TRACE] New record: Record
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] VarAccess a
[TRACE] VarValue Char
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] VarAccess d
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CallCmd setFinal
[TRACE] VarAccess afd
[TRACE] VarValue Record
[TRACE] IntLiteral 2
[TRACE] BinaryOp op=-
[TRACE] IntLiteral 0
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] VarAccess afd
[TRACE] VarValue Record
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[TRACE] IntLiteral 4
[TRACE] New primitive array size=4
[TRACE] IntLiteral 0
[TRACE] CharLiteral a
[TRACE] VarAccess str
[TRACE] VarValue Array
[TRACE] IntLiteral 0
[TRACE] CharLiteral b
[TRACE] VarAccess str
[TRACE] VarValue Array
[TRACE] IntLiteral 1
[TRACE] CharLiteral b
[TRACE] VarAccess str
[TRACE] VarValue Array
[TRACE] IntLiteral 2
[TRACE] CharLiteral a
[TRACE] VarAccess str
[TRACE] VarValue Array
[TRACE] IntLiteral 3
[TRACE] CallExpr runAFD
[TRACE] VarAccess afd
[TRACE] VarValue Record
[TRACE] VarAccess str
[TRACE] VarValue Array
[TRACE] IntLiteral 4
[TRACE] CallExpr runAFDHelper
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'start' value: Int
[TRACE] IntLiteral 0
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] BinaryOp op=<
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] CallExpr runAFDHelper
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] CallExpr delta
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] Array elem: Char
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op=n
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'sym' value: Char
[TRACE] VarAccess c
[TRACE] VarValue Char
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'dest' value: Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] BinaryOp op=+
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] BinaryOp op=<
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] CallExpr runAFDHelper
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] CallExpr delta
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] Array elem: Char
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op=n
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'sym' value: Char
[TRACE] VarAccess c
[TRACE] VarValue Char
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'sym' value: Char
[TRACE] VarAccess c
[TRACE] VarValue Char
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'dest' value: Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] BinaryOp op=+
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] BinaryOp op=<
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] CallExpr runAFDHelper
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] CallExpr delta
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] Array elem: Char
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op=n
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'sym' value: Char
[TRACE] VarAccess c
[TRACE] VarValue Char
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'sym' value: Char
[TRACE] VarAccess c
[TRACE] VarValue Char
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'dest' value: Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] BinaryOp op=+
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] BinaryOp op=<
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] CallExpr runAFDHelper
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] CallExpr delta
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] Array elem: Char
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op=n
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] BinaryOp op=-
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] BinaryOp op=-
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'sym' value: Char
[TRACE] VarAccess c
[TRACE] VarValue Char
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'dest' value: Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] BinaryOp op=+
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] BinaryOp op=<
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] VarAccess stop
[TRACE] VarValue Int
2[TRACE] CharLiteral  
 [TRACE] CallExpr isFinal
[TRACE] VarAccess afd
[TRACE] VarValue Record
[TRACE] VarAccess stop
[TRACE] VarValue Int
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] IntLiteral 0
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
true[TRACE] CharLiteral 


[TRACE] CharLiteral a
[TRACE] VarAccess str
[TRACE] VarValue Array
[TRACE] IntLiteral 0
[TRACE] CharLiteral b
[TRACE] VarAccess str
[TRACE] VarValue Array
[TRACE] IntLiteral 1
[TRACE] CharLiteral a
[TRACE] VarAccess str
[TRACE] VarValue Array
[TRACE] IntLiteral 2
[TRACE] CharLiteral b
[TRACE] VarAccess str
[TRACE] VarValue Array
[TRACE] IntLiteral 3
[TRACE] CallExpr runAFD
[TRACE] VarAccess afd
[TRACE] VarValue Record
[TRACE] VarAccess str
[TRACE] VarValue Array
[TRACE] IntLiteral 4
[TRACE] CallExpr runAFDHelper
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'start' value: Int
[TRACE] IntLiteral 0
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] BinaryOp op=<
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] CallExpr runAFDHelper
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] CallExpr delta
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] Array elem: Char
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op=n
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'sym' value: Char
[TRACE] VarAccess c
[TRACE] VarValue Char
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'dest' value: Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] BinaryOp op=+
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] BinaryOp op=<
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] CallExpr runAFDHelper
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] CallExpr delta
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] Array elem: Char
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op=n
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'sym' value: Char
[TRACE] VarAccess c
[TRACE] VarValue Char
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'sym' value: Char
[TRACE] VarAccess c
[TRACE] VarValue Char
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'dest' value: Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] BinaryOp op=+
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] BinaryOp op=<
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] CallExpr runAFDHelper
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] CallExpr delta
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] Array elem: Char
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op=n
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'sym' value: Char
[TRACE] VarAccess c
[TRACE] VarValue Char
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'dest' value: Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] BinaryOp op=+
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] BinaryOp op=<
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] CallExpr runAFDHelper
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] CallExpr delta
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] Array elem: Char
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op=n
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] IntLiteral 0
[TRACE] BinaryOp op=-
[TRACE] CallExpr abs
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] VarAccess n
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] IntLiteral 1
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'sym' value: Char
[TRACE] VarAccess c
[TRACE] VarValue Char
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'sym' value: Char
[TRACE] VarAccess c
[TRACE] VarValue Char
[TRACE] FieldAccess start
[TRACE] visit ArrayAccessNode
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'st' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Record
[TRACE] Field 'dest' value: Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] BinaryOp op=+
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess s
[TRACE] VarValue Array
[TRACE] BinaryOp op=<
[TRACE] VarAccess p
[TRACE] VarValue Int
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] VarAccess stop
[TRACE] VarValue Int
1[TRACE] CharLiteral  
 [TRACE] CallExpr isFinal
[TRACE] VarAccess afd
[TRACE] VarValue Record
[TRACE] VarAccess stop
[TRACE] VarValue Int
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] FieldAccess start
[TRACE] VarAccess m
[TRACE] VarValue Record
[TRACE] Field 'numt' value: Array
[TRACE] Array expr value: Array
[TRACE] VarAccess st
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] IntLiteral 0
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
false[TRACE] CharLiteral 



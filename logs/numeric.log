Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 115):
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 11 16 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 13 18 11 16 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token ':' ()
Shifting token ':' ()
Entering state 28
Stack now 0 2 4 9 12 17 28
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 12 17 28 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 36
Stack now 0 2 4 9 12 17 28 36
Reading a token
Next token is token '{' ()
Reducing stack by rule 18 (line 162):
   $1 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token '{' ()
Reducing stack by rule 17 (line 158):
   $1 = token ':' ()
   $2 = nterm type_list_non_empty ()
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 76
Reading a token
Next token is token '<' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Next token is token '<' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token '<' ()
Shifting token '<' ()
Entering state 102
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 76
Reading a token
Next token is token '*' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 81
Next token is token '*' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 128
Next token is token '*' ()
Shifting token '*' ()
Entering state 106
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 128 106
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 128 106 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 128 106 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 128 106 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 128 106 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 132
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 128 106 132
Reducing stack by rule 69 (line 275):
   $1 = nterm expression ()
   $2 = token '*' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 128
Next token is token ')' ()
Reducing stack by rule 65 (line 271):
   $1 = nterm expression ()
   $2 = token '<' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 76
Reading a token
Next token is token '/' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 81
Next token is token '/' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135
Next token is token '/' ()
Shifting token '/' ()
Entering state 107
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135 107
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135 107 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135 107 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135 107 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 133
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135 107 133
Reducing stack by rule 70 (line 276):
   $1 = nterm expression ()
   $2 = token '/' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147
Reading a token
Next token is token "return" ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 11 16 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token ':' ()
Shifting token ':' ()
Entering state 28
Stack now 0 2 4 9 12 17 28
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 12 17 28 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 36
Stack now 0 2 4 9 12 17 28 36
Reading a token
Next token is token '{' ()
Reducing stack by rule 18 (line 162):
   $1 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token '{' ()
Reducing stack by rule 17 (line 158):
   $1 = token ':' ()
   $2 = nterm type_list_non_empty ()
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 76
Reading a token
Next token is token '/' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 81
Next token is token '/' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 135
Next token is token '/' ()
Shifting token '/' ()
Entering state 107
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 135 107
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 135 107 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 135 107 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 135 107 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 133
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 135 107 133
Reducing stack by rule 70 (line 276):
   $1 = nterm expression ()
   $2 = token '/' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 54 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 11 16 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 13 18 11 16 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token ':' ()
Shifting token ':' ()
Entering state 28
Stack now 0 2 4 9 12 17 28
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 12 17 28 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 36
Stack now 0 2 4 9 12 17 28 36
Reading a token
Next token is token '{' ()
Reducing stack by rule 18 (line 162):
   $1 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token '{' ()
Reducing stack by rule 17 (line 158):
   $1 = token ':' ()
   $2 = nterm type_list_non_empty ()
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Stack now 0 2 4 9 12 17 29 37 42 69 90 58
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 104
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 104 76
Reading a token
Next token is token '/' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 104 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 104 81
Next token is token '/' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 104 130
Next token is token '/' ()
Shifting token '/' ()
Entering state 107
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 104 130 107
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 104 130 107 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 104 130 107 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 104 130 107 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 104 130 107 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 133
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 104 130 107 133
Reducing stack by rule 70 (line 276):
   $1 = nterm expression ()
   $2 = token '/' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 104 130
Next token is token ')' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88
Next token is token ')' ()
Shifting token ')' ()
Entering state 118
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 118
Reducing stack by rule 83 (line 295):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token '/' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token '/' ()
Shifting token '/' ()
Entering state 107
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 133
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 133
Reducing stack by rule 70 (line 276):
   $1 = nterm expression ()
   $2 = token '/' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76
Reading a token
Next token is token '*' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Next token is token '*' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token '*' ()
Shifting token '*' ()
Entering state 106
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106 76
Reading a token
Next token is token '-' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106 81
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 132
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106 132
Reducing stack by rule 69 (line 275):
   $1 = nterm expression ()
   $2 = token '*' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 105 131
Next token is token ';' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 76
Reading a token
Next token is token '<' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Next token is token '<' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token '<' ()
Shifting token '<' ()
Entering state 102
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 128
Next token is token ')' ()
Reducing stack by rule 65 (line 271):
   $1 = nterm expression ()
   $2 = token '<' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 58
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 58 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 58 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 58 81
Reading a token
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 58 88
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 58 88 105
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 58 88 105 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 58 88 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 58 88 105 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 58 88 105 131
Next token is token ')' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 58 88
Next token is token ')' ()
Shifting token ')' ()
Entering state 118
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 58 88 118
Reducing stack by rule 83 (line 295):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81
Reading a token
Next token is token '*' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119
Next token is token '*' ()
Shifting token '*' ()
Entering state 106
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 106
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 106 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 106 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 106 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 106 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 132
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 106 132
Reducing stack by rule 69 (line 275):
   $1 = nterm expression ()
   $2 = token '*' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147
Reading a token
Next token is token "if" ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 76
Reading a token
Next token is token '<' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Next token is token '<' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token '<' ()
Shifting token '<' ()
Entering state 102
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 128
Next token is token ')' ()
Reducing stack by rule 65 (line 271):
   $1 = nterm expression ()
   $2 = token '<' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147
Reading a token
Next token is token "return" ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 54 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 11 16 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token ':' ()
Shifting token ':' ()
Entering state 28
Stack now 0 2 4 9 12 17 28
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 12 17 28 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 36
Stack now 0 2 4 9 12 17 28 36
Reading a token
Next token is token '{' ()
Reducing stack by rule 18 (line 162):
   $1 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token '{' ()
Reducing stack by rule 17 (line 158):
   $1 = token ':' ()
   $2 = nterm type_list_non_empty ()
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token "<" ()
Shifting token "<" ()
Entering state 144
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123 144
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123 144 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 153
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123 144 153
Next token is token ',' ()
Reducing stack by rule 33 (line 191):
   $1 = nterm lvalue ()
-> $$ = nterm lvalue_list ()
Entering state 152
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123 144 152
Next token is token ',' ()
Shifting token ',' ()
Entering state 159
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123 144 152 159
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123 144 152 159 76
Reading a token
Next token is token '>' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 163
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123 144 152 159 163
Next token is token '>' ()
Reducing stack by rule 34 (line 192):
   $1 = nterm lvalue_list ()
   $2 = token ',' ()
   $3 = nterm lvalue ()
-> $$ = nterm lvalue_list ()
Entering state 152
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123 144 152
Next token is token '>' ()
Shifting token '>' ()
Entering state 158
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123 144 152 158
Reducing stack by rule 32 (line 186):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token "<" ()
   $6 = nterm lvalue_list ()
   $7 = token '>' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Stack now 0 2 4 9 12 17 29 37 42 69 90 58
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 76
Reading a token
Next token is token '-' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 81
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 105
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 105 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 105 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 105 131
Next token is token ')' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88
Next token is token ')' ()
Shifting token ')' ()
Entering state 118
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 118
Reducing stack by rule 83 (line 295):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token '/' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token '/' ()
Shifting token '/' ()
Entering state 107
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 58
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 58 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 58 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 58 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 58 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 58 88
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 58 88 104
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 58 88 104 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 58 88 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 58 88 104 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 58 88 104 130
Next token is token ')' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 58 88
Next token is token ')' ()
Shifting token ')' ()
Entering state 118
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 58 88 118
Reducing stack by rule 83 (line 295):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 133
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 107 133
Reducing stack by rule 70 (line 276):
   $1 = nterm expression ()
   $2 = token '/' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 69 90 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 69 90 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "iterate" ()
Shifting token "iterate" ()
Entering state 56
Stack now 0 2 4 9 12 17 29 37 42 56
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 86
Stack now 0 2 4 9 12 17 29 37 42 56 86
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 115
Stack now 0 2 4 9 12 17 29 37 42 56 86 115
Next token is token ')' ()
Shifting token ')' ()
Entering state 138
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 76
Reading a token
Next token is token '/' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 81
Next token is token '/' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130
Next token is token '/' ()
Shifting token '/' ()
Entering state 107
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 81
Reading a token
Next token is token '*' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 88
Next token is token '*' ()
Shifting token '*' ()
Entering state 106
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 88 106
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 88 106 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 88 106 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 88 106 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 88 106 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 132
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 88 106 132
Reducing stack by rule 69 (line 275):
   $1 = nterm expression ()
   $2 = token '*' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 88
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 88 104
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 88 104 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 88 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 88 104 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 88 104 130
Next token is token ')' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 88
Next token is token ')' ()
Shifting token ')' ()
Entering state 118
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 58 88 118
Reducing stack by rule 83 (line 295):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 133
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130 107 133
Reducing stack by rule 70 (line 276):
   $1 = nterm expression ()
   $2 = token '/' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130
Next token is token ';' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token '*' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Next token is token '*' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token '*' ()
Shifting token '*' ()
Entering state 106
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 106
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 106 76
Reading a token
Next token is token '*' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 106 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 106 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 106 81
Next token is token '*' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 132
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 106 132
Reducing stack by rule 69 (line 275):
   $1 = nterm expression ()
   $2 = token '*' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token '*' ()
Shifting token '*' ()
Entering state 106
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 106
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 106 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 106 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 106 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 106 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 132
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 106 132
Reducing stack by rule 69 (line 275):
   $1 = nterm expression ()
   $2 = token '*' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130
Next token is token ';' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 149
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 149
Reducing stack by rule 44 (line 227):
   $1 = token "iterate" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm iterate_cmd ()
Entering state 66
Stack now 0 2 4 9 12 17 29 37 42 66
Reducing stack by rule 25 (line 175):
   $1 = nterm iterate_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 69 90 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token '*' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token '*' ()
Shifting token '*' ()
Entering state 106
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 132
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106 132
Reducing stack by rule 69 (line 275):
   $1 = nterm expression ()
   $2 = token '*' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Stack now 0 2 4 9 12 17 29 37 42 69 90 58
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 76
Reading a token
Next token is token '-' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 81
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 105
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 105 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 105 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 105 131
Next token is token ')' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88
Next token is token ')' ()
Shifting token ')' ()
Entering state 118
Stack now 0 2 4 9 12 17 29 37 42 69 90 58 88 118
Reducing stack by rule 83 (line 295):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token '*' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token '*' ()
Shifting token '*' ()
Entering state 106
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106 81
Reading a token
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 132
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 106 132
Reducing stack by rule 69 (line 275):
   $1 = nterm expression ()
   $2 = token '*' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 104
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 104 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 104 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 104 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 104 130
Next token is token ';' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 11 16 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 13 18 11 16 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token ':' ()
Shifting token ':' ()
Entering state 28
Stack now 0 2 4 9 12 17 28
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 12 17 28 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 36
Stack now 0 2 4 9 12 17 28 36
Reading a token
Next token is token ',' ()
Reducing stack by rule 18 (line 162):
   $1 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token ',' ()
Shifting token ',' ()
Entering state 41
Stack now 0 2 4 9 12 17 28 35 41
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 12 17 28 35 41 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 35 41 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 44
Stack now 0 2 4 9 12 17 28 35 41 44
Reading a token
Next token is token '{' ()
Reducing stack by rule 19 (line 163):
   $1 = nterm type_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token '{' ()
Reducing stack by rule 17 (line 158):
   $1 = token ':' ()
   $2 = nterm type_list_non_empty ()
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 76
Reading a token
Next token is token "==" ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Next token is token "==" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token "==" ()
Shifting token "==" ()
Entering state 100
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 126
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100 126
Next token is token ')' ()
Reducing stack by rule 63 (line 269):
   $1 = nterm expression ()
   $2 = token "==" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83 112 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83 112 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83 112 135
Next token is token ';' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147
Reading a token
Next token is token "else" ()
Shifting token "else" ()
Entering state 155
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 58
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 58 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 58 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 58 81
Reading a token
Next token is token '<' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 58 88
Next token is token '<' ()
Shifting token '<' ()
Entering state 102
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 58 88 102
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 58 88 102 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 58 88 102 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 58 88 102 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 58 88 102 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 58 88 102 128
Next token is token ')' ()
Reducing stack by rule 65 (line 271):
   $1 = nterm expression ()
   $2 = token '<' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 58 88
Next token is token ')' ()
Shifting token ')' ()
Entering state 118
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 58 88 118
Reducing stack by rule 83 (line 295):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 81
Reading a token
Next token is token "&&" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113
Next token is token "&&" ()
Shifting token "&&" ()
Entering state 99
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99 58
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99 58 76
Reading a token
Next token is token '<' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99 58 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99 58 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99 58 81
Next token is token '<' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99 58 88
Next token is token '<' ()
Shifting token '<' ()
Entering state 102
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99 58 88 102
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99 58 88 102 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99 58 88 102 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99 58 88 102 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99 58 88 102 128
Next token is token ')' ()
Reducing stack by rule 65 (line 271):
   $1 = nterm expression ()
   $2 = token '<' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99 58 88
Next token is token ')' ()
Shifting token ')' ()
Entering state 118
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99 58 88 118
Reducing stack by rule 83 (line 295):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 125
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 99 125
Next token is token ')' ()
Reducing stack by rule 62 (line 268):
   $1 = nterm expression ()
   $2 = token "&&" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 54 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 54 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 54 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 54 83
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112 135
Next token is token ';' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147
Reading a token
Next token is token "else" ()
Shifting token "else" ()
Entering state 155
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85
Reading a token
Next token is token '!' ()
Shifting token '!' ()
Entering state 78
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58
Reading a token
Next token is token '!' ()
Shifting token '!' ()
Entering state 78
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78 58
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78 58 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78 58 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78 58 81
Reading a token
Next token is token '<' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78 58 88
Next token is token '<' ()
Shifting token '<' ()
Entering state 102
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78 58 88 102
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78 58 88 102 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78 58 88 102 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78 58 88 102 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78 58 88 102 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78 58 88 102 128
Next token is token ')' ()
Reducing stack by rule 65 (line 271):
   $1 = nterm expression ()
   $2 = token '<' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78 58 88
Next token is token ')' ()
Shifting token ')' ()
Entering state 118
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78 58 88 118
Reducing stack by rule 83 (line 295):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78 81
Reading a token
Next token is token "&&" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 98
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 78 98
Reducing stack by rule 60 (line 266):
   $1 = token '!' ()
   $2 = nterm expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88
Next token is token "&&" ()
Shifting token "&&" ()
Entering state 99
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99
Reading a token
Next token is token '!' ()
Shifting token '!' ()
Entering state 78
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78 58
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78 58 76
Reading a token
Next token is token "==" ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78 58 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78 58 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78 58 81
Next token is token "==" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78 58 88
Next token is token "==" ()
Shifting token "==" ()
Entering state 100
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78 58 88 100
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78 58 88 100 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78 58 88 100 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78 58 88 100 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 126
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78 58 88 100 126
Next token is token ')' ()
Reducing stack by rule 63 (line 269):
   $1 = nterm expression ()
   $2 = token "==" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78 58 88
Next token is token ')' ()
Shifting token ')' ()
Entering state 118
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78 58 88 118
Reducing stack by rule 83 (line 295):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 98
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 78 98
Reducing stack by rule 60 (line 266):
   $1 = token '!' ()
   $2 = nterm expression ()
-> $$ = nterm expression ()
Entering state 125
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 99 125
Next token is token ')' ()
Reducing stack by rule 62 (line 268):
   $1 = nterm expression ()
   $2 = token "&&" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88
Next token is token ')' ()
Shifting token ')' ()
Entering state 118
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 58 88 118
Reducing stack by rule 83 (line 295):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 98
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 78 98
Reducing stack by rule 60 (line 266):
   $1 = token '!' ()
   $2 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 76
Reading a token
Next token is token '/' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 81
Next token is token '/' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 84
Next token is token '/' ()
Shifting token '/' ()
Entering state 107
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 84 107
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 84 107 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 84 107 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 84 107 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 133
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 84 107 133
Reducing stack by rule 70 (line 276):
   $1 = nterm expression ()
   $2 = token '/' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 135
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 135 104
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 135 104 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 135 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 135 104 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 135 104 130
Next token is token ')' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123
Reading a token
Next token is token "<" ()
Shifting token "<" ()
Entering state 144
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 153
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144 153
Next token is token ',' ()
Reducing stack by rule 33 (line 191):
   $1 = nterm lvalue ()
-> $$ = nterm lvalue_list ()
Entering state 152
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144 152
Next token is token ',' ()
Shifting token ',' ()
Entering state 159
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144 152 159
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144 152 159 76
Reading a token
Next token is token '>' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 163
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144 152 159 163
Next token is token '>' ()
Reducing stack by rule 34 (line 192):
   $1 = nterm lvalue_list ()
   $2 = token ',' ()
   $3 = nterm lvalue ()
-> $$ = nterm lvalue_list ()
Entering state 152
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144 152
Next token is token '>' ()
Shifting token '>' ()
Entering state 158
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144 152 158
Reducing stack by rule 32 (line 186):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token "<" ()
   $6 = nterm lvalue_list ()
   $7 = token '>' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 61
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112 135
Next token is token ';' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147
Reading a token
Next token is token "else" ()
Shifting token "else" ()
Entering state 155
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 76
Reading a token
Next token is token '<' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 81
Next token is token '<' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113
Next token is token '<' ()
Shifting token '<' ()
Entering state 102
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 102
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 102 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 102 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 102 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 102 128
Next token is token ')' ()
Reducing stack by rule 65 (line 271):
   $1 = nterm expression ()
   $2 = token '<' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 76
Reading a token
Next token is token '*' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 81
Next token is token '*' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 84
Next token is token '*' ()
Shifting token '*' ()
Entering state 106
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 84 106
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 84 106 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 84 106 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 84 106 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 132
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 84 106 132
Reducing stack by rule 69 (line 275):
   $1 = nterm expression ()
   $2 = token '*' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 76
Reading a token
Next token is token '-' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 81
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 135
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 135 105
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 135 105 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 135 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 135 105 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 135 105 131
Next token is token ')' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123
Reading a token
Next token is token "<" ()
Shifting token "<" ()
Entering state 144
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 153
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144 153
Next token is token ',' ()
Reducing stack by rule 33 (line 191):
   $1 = nterm lvalue ()
-> $$ = nterm lvalue_list ()
Entering state 152
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144 152
Next token is token ',' ()
Shifting token ',' ()
Entering state 159
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144 152 159
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144 152 159 76
Reading a token
Next token is token '>' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 163
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144 152 159 163
Next token is token '>' ()
Reducing stack by rule 34 (line 192):
   $1 = nterm lvalue_list ()
   $2 = token ',' ()
   $3 = nterm lvalue ()
-> $$ = nterm lvalue_list ()
Entering state 152
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144 152
Next token is token '>' ()
Shifting token '>' ()
Entering state 158
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 48 75 95 123 144 152 158
Reducing stack by rule 32 (line 186):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token "<" ()
   $6 = nterm lvalue_list ()
   $7 = token '>' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 61
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83 112 135
Next token is token ';' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147
Reading a token
Next token is token "return" ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 161
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 55 85 113 136 147 155 161
Reducing stack by rule 43 (line 222):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
   $6 = token "else" ()
   $7 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 161
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 55 85 113 136 147 155 161
Reducing stack by rule 43 (line 222):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
   $6 = token "else" ()
   $7 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 161
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 161
Reducing stack by rule 43 (line 222):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
   $6 = token "else" ()
   $7 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 54
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 54 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 54 83 112
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 54 83 112 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 83 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 83 112 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 54 83 112 135
Next token is token ';' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 11 16 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 13 18 11 16 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token ':' ()
Shifting token ':' ()
Entering state 28
Stack now 0 2 4 9 12 17 28
Reading a token
Next token is token "Float" ()
Shifting token "Float" ()
Entering state 24
Stack now 0 2 4 9 12 17 28 24
Reducing stack by rule 56 (line 259):
   $1 = token "Float" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 36
Stack now 0 2 4 9 12 17 28 36
Reading a token
Next token is token '{' ()
Reducing stack by rule 18 (line 162):
   $1 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token '{' ()
Reducing stack by rule 17 (line 158):
   $1 = token ':' ()
   $2 = nterm type_list_non_empty ()
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 54 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Reading a token
Next token is token '/' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token '/' ()
Shifting token '/' ()
Entering state 107
Stack now 0 2 4 9 12 17 29 37 42 54 84 107
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 76 96 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 76 96 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 76 96 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 133
Stack now 0 2 4 9 12 17 29 37 42 54 84 107 133
Reducing stack by rule 70 (line 276):
   $1 = nterm expression ()
   $2 = token '/' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token ')' ()
Reducing stack by rule 11 (line 143):
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token '{' ()
Reducing stack by rule 16 (line 157):
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 81
Reading a token
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 52 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 52 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 52 76 96
Reading a token
Next token is token T_FLOAT_LITERAL ()
Shifting token T_FLOAT_LITERAL ()
Entering state 46
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 46
Reducing stack by rule 78 (line 290):
   $1 = token T_FLOAT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 52 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 111):
   $1 = nterm def_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
[TC] visit ReturnCmdNode
[TC] visit ReturnCmdNode
[TC] visit AssignCmdNode
[TC] RHS=Float
[TC] LHS(var)=‹unknown›
[TC] visit ReturnCmdNode
[TC] visit AssignCmdNode
[TC] RHS=Float
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=Float
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=Float
[TC] LHS(var)=Float
[TC] visit ReturnCmdNode
[TC] visit ReturnCmdNode
[TC] visit AssignCmdNode
[TC] RHS=Float
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=Float
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=Float
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=Float
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=Float
[TC] LHS(var)=Float
[TC] visit AssignCmdNode
[TC] RHS=Float
[TC] LHS(var)=‹unknown›
[TC] visit ReturnCmdNode
[TC] visit ReturnCmdNode
[TC] visit ReturnCmdNode
[TC] visit ReturnCmdNode
[TC] visit ReturnCmdNode
[TC] visit ReturnCmdNode
[TC] visit ReturnCmdNode
[TC] visit AssignCmdNode
[TC] RHS=Float
[TC] LHS(var)=‹unknown›
[TC] fun dowToOneRec returns [Float, Float]
[TC] fun guessRoot returns [Float]
[TC] fun ln returns [Float]
[TC] fun lnb returns [Float]
[TC] fun main returns []
[TC] fun sqrt returns [Float]
[TC] fun sqrtrec returns [Float]
[TRACE] CallCmd main
[TRACE] CallExpr lnb
[TRACE] BinaryOp op=/
[TRACE] CallExpr ln
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] CallCmd dowToOneRec
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] BinaryOp op==
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op=<
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op=<
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op=<
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op==
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] CallCmd dowToOneRec
[TRACE] BinaryOp op=/
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess dc
[TRACE] VarValue Float
[TRACE] BinaryOp op==
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op=<
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op=<
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op=<
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op==
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] CallCmd dowToOneRec
[TRACE] BinaryOp op=/
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess dc
[TRACE] VarValue Float
[TRACE] BinaryOp op==
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op=<
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op=<
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] VarAccess dc
[TRACE] VarValue Float
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] VarAccess dc
[TRACE] VarValue Float
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] VarAccess dc
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] BinaryOp op=-
[TRACE] VarAccess a
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess a
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] IntLiteral 20
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=-
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] VarAccess log
[TRACE] VarValue Float
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] CallExpr ln
[TRACE] VarAccess base
[TRACE] VarValue Float
[TRACE] CallCmd dowToOneRec
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] BinaryOp op==
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op=<
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op=<
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op=&
[TRACE] BinaryOp op=<
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op==
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] CallCmd dowToOneRec
[TRACE] BinaryOp op=/
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess dc
[TRACE] VarValue Float
[TRACE] BinaryOp op==
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] VarAccess dc
[TRACE] VarValue Float
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] VarAccess dc
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] BinaryOp op=-
[TRACE] VarAccess a
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess a
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] IntLiteral 20
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=*
[TRACE] VarAccess t
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] VarAccess y
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] BinaryOp op=+
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=-
[TRACE] VarAccess n
[TRACE] VarValue Float
[TRACE] VarAccess s
[TRACE] VarValue Float
[TRACE] VarAccess log
[TRACE] VarValue Float
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] VarAccess log
[TRACE] VarValue Float
2.40654[TRACE] CharLiteral 


[TRACE] CallExpr sqrt
[TRACE] CallExpr guessRoot
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] BinaryOp op=<
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] VarAccess a
[TRACE] VarValue Float
[TRACE] VarAccess a
[TRACE] VarValue Float
[TRACE] VarAccess a
[TRACE] VarValue Float
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] CallExpr sqrtrec
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] VarAccess g
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] BinaryOp op=+
[TRACE] VarAccess x0
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] VarAccess x0
[TRACE] VarValue Float
[TRACE] IntLiteral 2
[TRACE] BinaryOp op=-
[TRACE] BinaryOp op=*
[TRACE] VarAccess x1
[TRACE] VarValue Float
[TRACE] VarAccess x1
[TRACE] VarValue Float
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] BinaryOp op=<
[TRACE] VarAccess diff
[TRACE] VarValue Float
[TRACE] BinaryOp op=<
[TRACE] VarAccess diff
[TRACE] VarValue Float
[TRACE] CallExpr sqrtrec
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] VarAccess x1
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] BinaryOp op=+
[TRACE] VarAccess x0
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] VarAccess x0
[TRACE] VarValue Float
[TRACE] IntLiteral 2
[TRACE] BinaryOp op=-
[TRACE] BinaryOp op=*
[TRACE] VarAccess x1
[TRACE] VarValue Float
[TRACE] VarAccess x1
[TRACE] VarValue Float
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] BinaryOp op=<
[TRACE] VarAccess diff
[TRACE] VarValue Float
[TRACE] BinaryOp op=<
[TRACE] VarAccess diff
[TRACE] VarValue Float
[TRACE] CallExpr sqrtrec
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] VarAccess x1
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] BinaryOp op=+
[TRACE] VarAccess x0
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] VarAccess x0
[TRACE] VarValue Float
[TRACE] IntLiteral 2
[TRACE] BinaryOp op=-
[TRACE] BinaryOp op=*
[TRACE] VarAccess x1
[TRACE] VarValue Float
[TRACE] VarAccess x1
[TRACE] VarValue Float
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] BinaryOp op=<
[TRACE] VarAccess diff
[TRACE] VarValue Float
[TRACE] BinaryOp op=<
[TRACE] VarAccess diff
[TRACE] VarValue Float
[TRACE] CallExpr sqrtrec
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] VarAccess x1
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] BinaryOp op=+
[TRACE] VarAccess x0
[TRACE] VarValue Float
[TRACE] BinaryOp op=/
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] VarAccess x0
[TRACE] VarValue Float
[TRACE] IntLiteral 2
[TRACE] BinaryOp op=-
[TRACE] BinaryOp op=*
[TRACE] VarAccess x1
[TRACE] VarValue Float
[TRACE] VarAccess x1
[TRACE] VarValue Float
[TRACE] VarAccess x
[TRACE] VarValue Float
[TRACE] BinaryOp op=<
[TRACE] VarAccess diff
[TRACE] VarValue Float
[TRACE] BinaryOp op=*
[TRACE] BinaryOp op=-
[TRACE] VarAccess diff
[TRACE] VarValue Float
[TRACE] BinaryOp op=<
[TRACE] VarAccess diff
[TRACE] VarValue Float
[TRACE] VarAccess x1
[TRACE] VarValue Float
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
1.41421[TRACE] CharLiteral 



Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 115):
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token "data" ()
Shifting token "data" ()
Entering state 5
Stack now 0 2 5
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 10
Stack now 0 2 5 10
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 15
Stack now 0 2 5 10 15
Reducing stack by rule 8 (line 134):
-> $$ = nterm field_list ()
Entering state 19
Stack now 0 2 5 10 15 19
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 31
Stack now 0 2 5 10 15 19 31
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 39
Stack now 0 2 5 10 15 19 31 39
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 5 10 15 19 31 39 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 5 10 15 19 31 39 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 43
Stack now 0 2 5 10 15 19 31 39 43
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 73
Stack now 0 2 5 10 15 19 31 39 43 73
Reducing stack by rule 10 (line 139):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
   $4 = token ';' ()
-> $$ = nterm field_decl ()
Entering state 33
Stack now 0 2 5 10 15 19 33
Reducing stack by rule 9 (line 135):
   $1 = nterm field_list ()
   $2 = nterm field_decl ()
-> $$ = nterm field_list ()
Entering state 19
Stack now 0 2 5 10 15 19
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 31
Stack now 0 2 5 10 15 19 31
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 39
Stack now 0 2 5 10 15 19 31 39
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 5 10 15 19 31 39 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 5 10 15 19 31 39 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 43
Stack now 0 2 5 10 15 19 31 39 43
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 73
Stack now 0 2 5 10 15 19 31 39 43 73
Reducing stack by rule 10 (line 139):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
   $4 = token ';' ()
-> $$ = nterm field_decl ()
Entering state 33
Stack now 0 2 5 10 15 19 33
Reducing stack by rule 9 (line 135):
   $1 = nterm field_list ()
   $2 = nterm field_decl ()
-> $$ = nterm field_list ()
Entering state 19
Stack now 0 2 5 10 15 19
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 32
Stack now 0 2 5 10 15 19 32
Reducing stack by rule 7 (line 130):
   $1 = token "data" ()
   $2 = token T_TYID ()
   $3 = token '{' ()
   $4 = nterm field_list ()
   $5 = token '}' ()
-> $$ = nterm data_def ()
Entering state 8
Stack now 0 2 8
Reducing stack by rule 5 (line 121):
   $1 = nterm data_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token "data" ()
Shifting token "data" ()
Entering state 5
Stack now 0 2 5
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 10
Stack now 0 2 5 10
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 15
Stack now 0 2 5 10 15
Reducing stack by rule 8 (line 134):
-> $$ = nterm field_list ()
Entering state 19
Stack now 0 2 5 10 15 19
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 31
Stack now 0 2 5 10 15 19 31
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 39
Stack now 0 2 5 10 15 19 31 39
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 5 10 15 19 31 39 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 5 10 15 19 31 39 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 43
Stack now 0 2 5 10 15 19 31 39 43
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 73
Stack now 0 2 5 10 15 19 31 39 43 73
Reducing stack by rule 10 (line 139):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
   $4 = token ';' ()
-> $$ = nterm field_decl ()
Entering state 33
Stack now 0 2 5 10 15 19 33
Reducing stack by rule 9 (line 135):
   $1 = nterm field_list ()
   $2 = nterm field_decl ()
-> $$ = nterm field_list ()
Entering state 19
Stack now 0 2 5 10 15 19
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 31
Stack now 0 2 5 10 15 19 31
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 39
Stack now 0 2 5 10 15 19 31 39
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 5 10 15 19 31 39 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 5 10 15 19 31 39 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 43
Stack now 0 2 5 10 15 19 31 39 43
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 73
Stack now 0 2 5 10 15 19 31 39 43 73
Reducing stack by rule 10 (line 139):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
   $4 = token ';' ()
-> $$ = nterm field_decl ()
Entering state 33
Stack now 0 2 5 10 15 19 33
Reducing stack by rule 9 (line 135):
   $1 = nterm field_list ()
   $2 = nterm field_decl ()
-> $$ = nterm field_list ()
Entering state 19
Stack now 0 2 5 10 15 19
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 32
Stack now 0 2 5 10 15 19 32
Reducing stack by rule 7 (line 130):
   $1 = token "data" ()
   $2 = token T_TYID ()
   $3 = token '{' ()
   $4 = nterm field_list ()
   $5 = token '}' ()
-> $$ = nterm data_def ()
Entering state 8
Stack now 0 2 8
Reducing stack by rule 5 (line 121):
   $1 = nterm data_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token ')' ()
Reducing stack by rule 11 (line 143):
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token ':' ()
Shifting token ':' ()
Entering state 28
Stack now 0 2 4 9 12 17 28
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 12 17 28 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 36
Stack now 0 2 4 9 12 17 28 36
Reading a token
Next token is token '{' ()
Reducing stack by rule 18 (line 162):
   $1 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token '{' ()
Reducing stack by rule 17 (line 158):
   $1 = token ':' ()
   $2 = nterm type_list_non_empty ()
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token "new" ()
Shifting token "new" ()
Entering state 57
Stack now 0 2 4 9 12 17 29 37 42 69 90 57
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 87
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87
Reading a token
Next token is token ';' ()
Reducing stack by rule 85 (line 300):
   $1 = token "new" ()
   $2 = nterm atomic_type ()
-> $$ = nterm new_expression ()
Entering state 72
Stack now 0 2 4 9 12 17 29 37 42 69 90 72
Reducing stack by rule 84 (line 296):
   $1 = nterm new_expression ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token "null" ()
Shifting token "null" ()
Entering state 51
Stack now 0 2 4 9 12 17 29 37 42 69 90 51
Reducing stack by rule 82 (line 294):
   $1 = token "null" ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 11 16 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token ':' ()
Shifting token ':' ()
Entering state 28
Stack now 0 2 4 9 12 17 28
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 12 17 28 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 36
Stack now 0 2 4 9 12 17 28 36
Reading a token
Next token is token '{' ()
Reducing stack by rule 18 (line 162):
   $1 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token '{' ()
Reducing stack by rule 17 (line 158):
   $1 = token ':' ()
   $2 = nterm type_list_non_empty ()
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Reading a token
Next token is token "==" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token "==" ()
Shifting token "==" ()
Entering state 100
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100
Reading a token
Next token is token "null" ()
Shifting token "null" ()
Entering state 51
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100 51
Reducing stack by rule 82 (line 294):
   $1 = token "null" ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 126
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100 126
Next token is token ')' ()
Reducing stack by rule 63 (line 269):
   $1 = nterm expression ()
   $2 = token "==" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147
Reading a token
Next token is token "return" ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 54 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 54 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 11 16 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 13 18 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token '{' ()
Reducing stack by rule 16 (line 157):
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token "new" ()
Shifting token "new" ()
Entering state 57
Stack now 0 2 4 9 12 17 29 37 42 69 90 57
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 87
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87
Reading a token
Next token is token ';' ()
Reducing stack by rule 85 (line 300):
   $1 = token "new" ()
   $2 = nterm atomic_type ()
-> $$ = nterm new_expression ()
Entering state 72
Stack now 0 2 4 9 12 17 29 37 42 69 90 72
Reducing stack by rule 84 (line 296):
   $1 = nterm new_expression ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token "null" ()
Shifting token "null" ()
Entering state 51
Stack now 0 2 4 9 12 17 29 37 42 69 90 51
Reducing stack by rule 82 (line 294):
   $1 = token "null" ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Reading a token
Next token is token "==" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token "==" ()
Shifting token "==" ()
Entering state 100
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100
Reading a token
Next token is token "null" ()
Shifting token "null" ()
Entering state 51
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100 51
Reducing stack by rule 82 (line 294):
   $1 = token "null" ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 126
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100 126
Next token is token ')' ()
Reducing stack by rule 63 (line 269):
   $1 = nterm expression ()
   $2 = token "==" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147
Reading a token
Next token is token "else" ()
Shifting token "else" ()
Entering state 155
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 161
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147 155 161
Reducing stack by rule 43 (line 222):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
   $6 = token "else" ()
   $7 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 69 90 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 69 90 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 104
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 104 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 104 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 104 130
Next token is token ';' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 11 16 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token ':' ()
Shifting token ':' ()
Entering state 28
Stack now 0 2 4 9 12 17 28
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 12 17 28 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 12 17 28 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 36
Stack now 0 2 4 9 12 17 28 36
Reading a token
Next token is token '{' ()
Reducing stack by rule 18 (line 162):
   $1 = nterm type ()
-> $$ = nterm type_list_non_empty ()
Entering state 35
Stack now 0 2 4 9 12 17 28 35
Next token is token '{' ()
Reducing stack by rule 17 (line 158):
   $1 = token ':' ()
   $2 = nterm type_list_non_empty ()
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Reading a token
Next token is token "!=" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token "!=" ()
Shifting token "!=" ()
Entering state 101
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 101
Reading a token
Next token is token "null" ()
Shifting token "null" ()
Entering state 51
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 101 51
Reducing stack by rule 82 (line 294):
   $1 = token "null" ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 101 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 101 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 127
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 101 127
Next token is token ')' ()
Reducing stack by rule 64 (line 270):
   $1 = nterm expression ()
   $2 = token "!=" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81
Reading a token
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69
Next token is token '.' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 70
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 70 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 70 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81
Reading a token
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 105
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 105 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 105 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 105 131
Next token is token ';' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147
Reading a token
Next token is token "return" ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Next token is token "return" ()
Shifting token "return" ()
Entering state 54
Stack now 0 2 4 9 12 17 29 37 42 54
Reading a token
Next token is token "null" ()
Shifting token "null" ()
Entering state 51
Stack now 0 2 4 9 12 17 29 37 42 54 51
Reducing stack by rule 82 (line 294):
   $1 = token "null" ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 54 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 54 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 54 84
Next token is token ';' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 83
Stack now 0 2 4 9 12 17 29 37 42 54 83
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Stack now 0 2 4 9 12 17 29 37 42 54 83 111
Reducing stack by rule 37 (line 204):
   $1 = token "return" ()
   $2 = nterm expression_list ()
   $3 = token ';' ()
-> $$ = nterm return_cmd ()
Entering state 64
Stack now 0 2 4 9 12 17 29 37 42 64
Reducing stack by rule 28 (line 178):
   $1 = nterm return_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 11 16 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token '{' ()
Reducing stack by rule 16 (line 157):
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 76
Reading a token
Next token is token "!=" ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Next token is token "!=" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token "!=" ()
Shifting token "!=" ()
Entering state 101
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 101
Reading a token
Next token is token "null" ()
Shifting token "null" ()
Entering state 51
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 101 51
Reducing stack by rule 82 (line 294):
   $1 = token "null" ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 101 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 101 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 127
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 101 127
Next token is token ')' ()
Reducing stack by rule 64 (line 270):
   $1 = nterm expression ()
   $2 = token "!=" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48 75 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48 75 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48 75 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48 75 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48 75 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48 75 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147
Reading a token
Next token is token "if" ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 76
Reading a token
Next token is token "==" ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Next token is token "==" ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token "==" ()
Shifting token "==" ()
Entering state 100
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100
Reading a token
Next token is token "null" ()
Shifting token "null" ()
Entering state 51
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100 51
Reducing stack by rule 82 (line 294):
   $1 = token "null" ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 126
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 100 126
Next token is token ')' ()
Reducing stack by rule 63 (line 269):
   $1 = nterm expression ()
   $2 = token "==" ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147
Reading a token
Next token is token '}' ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token T_TYID ()
Shifting token T_TYID ()
Entering state 20
Stack now 0 2 4 9 11 16 20
Reducing stack by rule 58 (line 261):
   $1 = token T_TYID ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token '{' ()
Reducing stack by rule 16 (line 157):
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 58
Stack now 0 2 4 9 12 17 29 37 42 52 58
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 52 58 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 52 58 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 58 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 58 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 52 58 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 52 58 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 52 58 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 58 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 58 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 88
Stack now 0 2 4 9 12 17 29 37 42 52 58 88
Next token is token ')' ()
Shifting token ')' ()
Entering state 118
Stack now 0 2 4 9 12 17 29 37 42 52 58 88 118
Reducing stack by rule 83 (line 295):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token '.' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token '.' ()
Shifting token '.' ()
Entering state 91
Stack now 0 2 4 9 12 17 29 37 42 48 75 81 91
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 120
Stack now 0 2 4 9 12 17 29 37 42 48 75 81 91 120
Reducing stack by rule 49 (line 244):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token ')' ()
Reducing stack by rule 11 (line 143):
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token '{' ()
Reducing stack by rule 16 (line 157):
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96
Reading a token
Next token is token ')' ()
Reducing stack by rule 40 (line 215):
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "iterate" ()
Shifting token "iterate" ()
Entering state 56
Stack now 0 2 4 9 12 17 29 37 42 56
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 86
Stack now 0 2 4 9 12 17 29 37 42 56 86
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 115
Stack now 0 2 4 9 12 17 29 37 42 56 86 115
Next token is token ')' ()
Shifting token ')' ()
Entering state 138
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130
Next token is token ';' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48 75 94 112
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48 75 94 112 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48 75 94 112 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48 75 94 112 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 149
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 149
Reducing stack by rule 44 (line 227):
   $1 = token "iterate" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm iterate_cmd ()
Entering state 66
Stack now 0 2 4 9 12 17 29 37 42 66
Reducing stack by rule 25 (line 175):
   $1 = nterm iterate_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 96
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 124
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124
Next token is token ')' ()
Shifting token ')' ()
Entering state 146
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 145
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 154
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 154
Next token is token ']' ()
Shifting token ']' ()
Entering state 160
Stack now 0 2 4 9 12 17 29 37 42 69 90 76 96 124 146 145 154 160
Reducing stack by rule 75 (line 284):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
   $5 = token '[' ()
   $6 = nterm expression ()
   $7 = token ']' ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ')' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 111):
   $1 = nterm def_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
[TC] visit AssignCmdNode
[TC] visit NewExprNode
[TC] RHS=LList
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] LHS=Node
[TC] RHS=null
[TC] visit AssignCmdNode
[TC] LHS=Int
[TC] RHS=Int
[TC] visit ReturnCmdNode
[TC] visit ReturnCmdNode
[TC] visit ReturnCmdNode
[TC] visit AssignCmdNode
[TC] visit NewExprNode
[TC] RHS=Node
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] LHS=Int
[TC] RHS=Int
[TC] visit AssignCmdNode
[TC] LHS=Node
[TC] RHS=null
[TC] visit AssignCmdNode
[TC] LHS=Node
[TC] RHS=Node
[TC] visit AssignCmdNode
[TC] RHS=Node
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] LHS=Node
[TC] RHS=Node
[TC] visit AssignCmdNode
[TC] LHS=Int
[TC] RHS=Int
[TC] visit AssignCmdNode
[TC] RHS=Node
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] LHS=Node
[TC] RHS=Node
[TC] visit AssignCmdNode
[TC] LHS=Int
[TC] RHS=Int
[TC] visit ReturnCmdNode
[TC] visit ReturnCmdNode
[TC] visit AssignCmdNode
[TC] RHS=Int
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=LList
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=Node
[TC] LHS(var)=‹unknown›
[TC] fun addNode returns []
[TC] fun createList returns [LList]
[TC] fun lastNode returns [Node]
[TC] fun main returns []
[TC] fun printLList returns []
[TC] fun printList returns []
[TC] fun removeHead returns [Node]
[TRACE] CallCmd main
[TRACE] IntLiteral 65
[TRACE] CallExpr createList
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'LList'.
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Node'.
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Node'.
    └─ DETECTADO CICLO! O tipo 'Node' já está sendo criado. Retornando 'null' para quebrar a recursão.
[TRACE] New record: Record
[TRACE] VarAccess n
[TRACE] VarValue Record
[TRACE] IntLiteral 0
[TRACE] VarAccess n
[TRACE] VarValue Record
[TRACE] VarAccess n
[TRACE] VarValue Record
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] CallCmd addNode
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Node'.
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Node'.
    └─ DETECTADO CICLO! O tipo 'Node' já está sendo criado. Retornando 'null' para quebrar a recursão.
[TRACE] New record: Record
[TRACE] VarAccess x
[TRACE] VarValue Int
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'head' value: null
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] BinaryOp op=+
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'size' value: Int
[TRACE] IntLiteral 1
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] IntLiteral 5
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CallCmd addNode
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Node'.
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Node'.
    └─ DETECTADO CICLO! O tipo 'Node' já está sendo criado. Retornando 'null' para quebrar a recursão.
[TRACE] New record: Record
[TRACE] VarAccess x
[TRACE] VarValue Int
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'head' value: Record
[TRACE] CallExpr lastNode
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'head' value: Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: null
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] VarAccess last
[TRACE] VarValue Record
[TRACE] BinaryOp op=+
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'size' value: Int
[TRACE] IntLiteral 1
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CallCmd addNode
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Node'.
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Node'.
    └─ DETECTADO CICLO! O tipo 'Node' já está sendo criado. Retornando 'null' para quebrar a recursão.
[TRACE] New record: Record
[TRACE] VarAccess x
[TRACE] VarValue Int
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'head' value: Record
[TRACE] CallExpr lastNode
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'head' value: Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] CallExpr lastNode
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: null
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] VarAccess last
[TRACE] VarValue Record
[TRACE] BinaryOp op=+
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'size' value: Int
[TRACE] IntLiteral 1
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CallCmd addNode
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Node'.
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Node'.
    └─ DETECTADO CICLO! O tipo 'Node' já está sendo criado. Retornando 'null' para quebrar a recursão.
[TRACE] New record: Record
[TRACE] VarAccess x
[TRACE] VarValue Int
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'head' value: Record
[TRACE] CallExpr lastNode
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'head' value: Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] CallExpr lastNode
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] CallExpr lastNode
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: null
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] VarAccess last
[TRACE] VarValue Record
[TRACE] BinaryOp op=+
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'size' value: Int
[TRACE] IntLiteral 1
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CallCmd addNode
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Node'.
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Node'.
    └─ DETECTADO CICLO! O tipo 'Node' já está sendo criado. Retornando 'null' para quebrar a recursão.
[TRACE] New record: Record
[TRACE] VarAccess x
[TRACE] VarValue Int
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'head' value: Record
[TRACE] CallExpr lastNode
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'head' value: Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] CallExpr lastNode
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] CallExpr lastNode
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] CallExpr lastNode
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: null
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] VarAccess last
[TRACE] VarValue Record
[TRACE] BinaryOp op=+
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'size' value: Int
[TRACE] IntLiteral 1
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] BinaryOp op=+
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CallCmd addNode
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Node'.
[DEBUG] Tentando criar valor padrão para o tipo de registro: 'Node'.
    └─ DETECTADO CICLO! O tipo 'Node' já está sendo criado. Retornando 'null' para quebrar a recursão.
[TRACE] New record: Record
[TRACE] VarAccess x
[TRACE] VarValue Int
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'head' value: Record
[TRACE] CallExpr lastNode
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'head' value: Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] CallExpr lastNode
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] CallExpr lastNode
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] CallExpr lastNode
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] CallExpr lastNode
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op==
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: null
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] VarAccess no
[TRACE] VarValue Record
[TRACE] VarAccess last
[TRACE] VarValue Record
[TRACE] BinaryOp op=+
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'size' value: Int
[TRACE] IntLiteral 1
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] CallCmd printLList
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'size' value: Int
6[TRACE] CharLiteral :
:[TRACE] CallCmd printList
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'head' value: Record
[TRACE] BinaryOp op=n
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'val' value: Int
65[TRACE] CharLiteral -
-[TRACE] CharLiteral >
>[TRACE] CallCmd printList
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op=n
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'val' value: Int
66[TRACE] CharLiteral -
-[TRACE] CharLiteral >
>[TRACE] CallCmd printList
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op=n
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'val' value: Int
67[TRACE] CharLiteral -
-[TRACE] CharLiteral >
>[TRACE] CallCmd printList
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op=n
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'val' value: Int
68[TRACE] CharLiteral -
-[TRACE] CharLiteral >
>[TRACE] CallCmd printList
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op=n
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'val' value: Int
69[TRACE] CharLiteral -
-[TRACE] CharLiteral >
>[TRACE] CallCmd printList
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op=n
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'val' value: Int
70[TRACE] CharLiteral -
-[TRACE] CharLiteral >
>[TRACE] CallCmd printList
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: null
[TRACE] BinaryOp op=n
[TRACE] VarAccess h
[TRACE] VarValue null
[TRACE] BinaryOp op==
[TRACE] VarAccess h
[TRACE] VarValue null
[TRACE] CharLiteral N
N[TRACE] CharLiteral U
U[TRACE] CharLiteral L
L[TRACE] CharLiteral L
L[TRACE] CharLiteral 


[TRACE] BinaryOp op==
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] BinaryOp op==
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] BinaryOp op==
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] BinaryOp op==
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] BinaryOp op==
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] BinaryOp op==
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] CallExpr removeHead
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] BinaryOp op=n
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'head' value: Record
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'head' value: Record
[TRACE] FieldAccess start
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'head' value: Record
[TRACE] Field 'next' value: Record
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] BinaryOp op=-
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'size' value: Int
[TRACE] IntLiteral 1
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] VarAccess node
[TRACE] VarValue Record
[TRACE] ReturnSignal caught
[TRACE] before index accept
[TRACE] IntLiteral 0
[TRACE] after index accept
[TRACE] CallCmd printLList
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'size' value: Int
5[TRACE] CharLiteral :
:[TRACE] CallCmd printList
[TRACE] FieldAccess start
[TRACE] VarAccess l
[TRACE] VarValue Record
[TRACE] Field 'head' value: Record
[TRACE] BinaryOp op=n
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'val' value: Int
66[TRACE] CharLiteral -
-[TRACE] CharLiteral >
>[TRACE] CallCmd printList
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op=n
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'val' value: Int
67[TRACE] CharLiteral -
-[TRACE] CharLiteral >
>[TRACE] CallCmd printList
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op=n
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'val' value: Int
68[TRACE] CharLiteral -
-[TRACE] CharLiteral >
>[TRACE] CallCmd printList
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op=n
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'val' value: Int
69[TRACE] CharLiteral -
-[TRACE] CharLiteral >
>[TRACE] CallCmd printList
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: Record
[TRACE] BinaryOp op=n
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'val' value: Int
70[TRACE] CharLiteral -
-[TRACE] CharLiteral >
>[TRACE] CallCmd printList
[TRACE] FieldAccess start
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] Field 'next' value: null
[TRACE] BinaryOp op=n
[TRACE] VarAccess h
[TRACE] VarValue null
[TRACE] BinaryOp op==
[TRACE] VarAccess h
[TRACE] VarValue null
[TRACE] CharLiteral N
N[TRACE] CharLiteral U
U[TRACE] CharLiteral L
L[TRACE] CharLiteral L
L[TRACE] CharLiteral 


[TRACE] BinaryOp op==
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] BinaryOp op==
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] BinaryOp op==
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] BinaryOp op==
[TRACE] VarAccess h
[TRACE] VarValue Record
[TRACE] BinaryOp op==
[TRACE] VarAccess h
[TRACE] VarValue Record

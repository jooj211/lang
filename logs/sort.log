Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 2 (line 115):
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 34
Stack now 0 2 4 9 11 16 26 34
Reading a token
Next token is token ']' ()
Shifting token ']' ()
Entering state 40
Stack now 0 2 4 9 11 16 26 34 40
Reducing stack by rule 52 (line 252):
   $1 = nterm type ()
   $2 = token '[' ()
   $3 = token ']' ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 13 18 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token '{' ()
Reducing stack by rule 16 (line 157):
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "iterate" ()
Shifting token "iterate" ()
Entering state 56
Stack now 0 2 4 9 12 17 29 37 42 56
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 86
Stack now 0 2 4 9 12 17 29 37 42 56 86
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 114
Stack now 0 2 4 9 12 17 29 37 42 56 86 114
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 115
Stack now 0 2 4 9 12 17 29 37 42 56 86 115
Next token is token ')' ()
Shifting token ')' ()
Entering state 138
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token "read" ()
Shifting token "read" ()
Entering state 53
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 53
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 53 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 82
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 53 82
Next token is token ';' ()
Shifting token ';' ()
Entering state 110
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 53 82 110
Reducing stack by rule 36 (line 200):
   $1 = token "read" ()
   $2 = nterm lvalue ()
   $3 = token ';' ()
-> $$ = nterm read_cmd ()
Entering state 63
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 63
Reducing stack by rule 27 (line 177):
   $1 = nterm read_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130
Next token is token ';' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 149
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 149
Reducing stack by rule 44 (line 227):
   $1 = token "iterate" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm iterate_cmd ()
Entering state 66
Stack now 0 2 4 9 12 17 29 37 42 66
Reducing stack by rule 25 (line 175):
   $1 = nterm iterate_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 34
Stack now 0 2 4 9 11 16 26 34
Reading a token
Next token is token ']' ()
Shifting token ']' ()
Entering state 40
Stack now 0 2 4 9 11 16 26 34 40
Reducing stack by rule 52 (line 252):
   $1 = nterm type ()
   $2 = token '[' ()
   $3 = token ']' ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 13 18 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token '{' ()
Reducing stack by rule 16 (line 157):
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 55 85
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 81
Reading a token
Next token is token '<' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token '<' ()
Shifting token '<' ()
Entering state 102
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 102 128
Next token is token ')' ()
Reducing stack by rule 65 (line 271):
   $1 = nterm expression ()
   $2 = token '<' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 76
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81 92
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81 92 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81 92 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token "iterate" ()
Shifting token "iterate" ()
Entering state 56
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 86
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 114
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 114
Reading a token
Next token is token '-' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 81
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 115
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 105
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 105 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 105 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 105 131
Next token is token ')' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 115
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115
Next token is token ')' ()
Shifting token ')' ()
Entering state 138
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 76
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 81
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 119
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 119 104
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 119 104 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 119 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 119 104 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 119 104 130
Next token is token ';' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 149
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 56 86 115 138 149
Reducing stack by rule 44 (line 227):
   $1 = token "iterate" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm iterate_cmd ()
Entering state 66
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 66
Reducing stack by rule 25 (line 175):
   $1 = nterm iterate_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 55 85 113 136 147
Reading a token
Next token is token "print" ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "print" ()
Shifting token "print" ()
Entering state 52
Stack now 0 2 4 9 12 17 29 37 42 52
Reading a token
Next token is token T_CHAR_LITERAL ()
Shifting token T_CHAR_LITERAL ()
Entering state 47
Stack now 0 2 4 9 12 17 29 37 42 52 47
Reducing stack by rule 79 (line 291):
   $1 = token T_CHAR_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 52 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 52 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 80
Stack now 0 2 4 9 12 17 29 37 42 52 80
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Stack now 0 2 4 9 12 17 29 37 42 52 80 109
Reducing stack by rule 29 (line 179):
   $1 = token "print" ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token ')' ()
Reducing stack by rule 11 (line 143):
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token '{' ()
Reducing stack by rule 16 (line 157):
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token "new" ()
Shifting token "new" ()
Entering state 57
Stack now 0 2 4 9 12 17 29 37 42 69 90 57
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 87
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 116
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 81
Reading a token
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 139
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 139
Next token is token ']' ()
Reducing stack by rule 90 (line 315):
   $1 = nterm expression ()
-> $$ = nterm optional_expression ()
Entering state 140
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 140
Next token is token ']' ()
Shifting token ']' ()
Entering state 150
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 116 140 150
Reducing stack by rule 87 (line 307):
   $1 = token '[' ()
   $2 = nterm optional_expression ()
   $3 = token ']' ()
-> $$ = nterm dim_list ()
Entering state 117
Stack now 0 2 4 9 12 17 29 37 42 69 90 57 87 117
Reading a token
Next token is token ';' ()
Reducing stack by rule 86 (line 302):
   $1 = token "new" ()
   $2 = nterm atomic_type ()
   $3 = nterm dim_list ()
-> $$ = nterm new_expression ()
Entering state 72
Stack now 0 2 4 9 12 17 29 37 42 69 90 72
Reducing stack by rule 84 (line 296):
   $1 = nterm new_expression ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 75
Stack now 0 2 4 9 12 17 29 37 42 48 75
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 48 75 76
Reading a token
Next token is token ',' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 48 75 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 81
Next token is token ',' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 2 4 9 12 17 29 37 42 48 75 84
Next token is token ',' ()
Reducing stack by rule 38 (line 208):
   $1 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 135
Stack now 0 2 4 9 12 17 29 37 42 48 75 94 112 135
Next token is token ')' ()
Reducing stack by rule 39 (line 210):
   $1 = nterm expression_list ()
   $2 = token ',' ()
   $3 = nterm expression ()
-> $$ = nterm expression_list ()
Entering state 94
Stack now 0 2 4 9 12 17 29 37 42 48 75 94
Next token is token ')' ()
Reducing stack by rule 41 (line 216):
   $1 = nterm expression_list ()
-> $$ = nterm optional_expression_list ()
Entering state 95
Stack now 0 2 4 9 12 17 29 37 42 48 75 95
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 2 4 9 12 17 29 37 42 48 75 95 123
Reading a token
Next token is token ';' ()
Reducing stack by rule 31 (line 184):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm optional_expression_list ()
   $4 = token ')' ()
-> $$ = nterm fun_call_cmd ()
Entering state 61
Stack now 0 2 4 9 12 17 29 37 42 61
Next token is token ';' ()
Shifting token ';' ()
Entering state 89
Stack now 0 2 4 9 12 17 29 37 42 61 89
Reducing stack by rule 30 (line 180):
   $1 = nterm fun_call_cmd ()
   $2 = token ';' ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 4
Stack now 0 2 4
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 9
Stack now 0 2 4 9
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token '[' ()
Shifting token '[' ()
Entering state 34
Stack now 0 2 4 9 11 16 26 34
Reading a token
Next token is token ']' ()
Shifting token ']' ()
Entering state 40
Stack now 0 2 4 9 11 16 26 34 40
Reducing stack by rule 52 (line 252):
   $1 = nterm type ()
   $2 = token '[' ()
   $3 = token ']' ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 11 16 26
Reading a token
Next token is token ',' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 14
Stack now 0 2 4 9 14
Reducing stack by rule 13 (line 148):
   $1 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ',' ()
Shifting token ',' ()
Entering state 18
Stack now 0 2 4 9 13 18
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 11
Stack now 0 2 4 9 13 18 11
Reading a token
Next token is token "::" ()
Shifting token "::" ()
Entering state 16
Stack now 0 2 4 9 13 18 11 16
Reading a token
Next token is token "Int" ()
Shifting token "Int" ()
Entering state 21
Stack now 0 2 4 9 13 18 11 16 21
Reducing stack by rule 53 (line 256):
   $1 = token "Int" ()
-> $$ = nterm atomic_type ()
Entering state 27
Stack now 0 2 4 9 13 18 11 16 27
Reducing stack by rule 51 (line 251):
   $1 = nterm atomic_type ()
-> $$ = nterm type ()
Entering state 26
Stack now 0 2 4 9 13 18 11 16 26
Reading a token
Next token is token ')' ()
Reducing stack by rule 15 (line 153):
   $1 = token T_ID ()
   $2 = token "::" ()
   $3 = nterm type ()
-> $$ = nterm param ()
Entering state 30
Stack now 0 2 4 9 13 18 30
Reducing stack by rule 14 (line 149):
   $1 = nterm param_list_non_empty ()
   $2 = token ',' ()
   $3 = nterm param ()
-> $$ = nterm param_list_non_empty ()
Entering state 13
Stack now 0 2 4 9 13
Next token is token ')' ()
Reducing stack by rule 12 (line 144):
   $1 = nterm param_list_non_empty ()
-> $$ = nterm params ()
Entering state 12
Stack now 0 2 4 9 12
Next token is token ')' ()
Shifting token ')' ()
Entering state 17
Stack now 0 2 4 9 12 17
Reading a token
Next token is token '{' ()
Reducing stack by rule 16 (line 157):
-> $$ = nterm optional_return_types ()
Entering state 29
Stack now 0 2 4 9 12 17 29
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 69 90
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 69 90 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token "iterate" ()
Shifting token "iterate" ()
Entering state 56
Stack now 0 2 4 9 12 17 29 37 42 56
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 86
Stack now 0 2 4 9 12 17 29 37 42 56 86
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 114
Stack now 0 2 4 9 12 17 29 37 42 56 86 114
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 115
Stack now 0 2 4 9 12 17 29 37 42 56 86 115
Next token is token ')' ()
Shifting token ')' ()
Entering state 138
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130
Next token is token ';' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token "iterate" ()
Shifting token "iterate" ()
Entering state 56
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 86
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 114
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 114
Reading a token
Next token is token '-' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 81
Next token is token '-' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 115
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115
Next token is token '-' ()
Shifting token '-' ()
Entering state 105
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 105
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 105 76
Reading a token
Next token is token ')' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 105 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 105 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 105 81
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 131
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 105 131
Next token is token ')' ()
Reducing stack by rule 68 (line 274):
   $1 = nterm expression ()
   $2 = token '-' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 115
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115
Next token is token ')' ()
Shifting token ')' ()
Entering state 138
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37
Reducing stack by rule 20 (line 167):
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42
Reading a token
Next token is token "if" ()
Shifting token "if" ()
Entering state 55
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 85
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 76
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 81
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 81
Reading a token
Next token is token '<' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113
Next token is token '<' ()
Shifting token '<' ()
Entering state 102
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 102
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 102 76
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 102 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 102 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 102 81
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 102 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 102 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 102 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 102 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 102 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 102 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 102 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 102 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 102 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 102 81
Reading a token
Next token is token ')' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 128
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 102 128
Next token is token ')' ()
Reducing stack by rule 65 (line 271):
   $1 = nterm expression ()
   $2 = token '<' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 113
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113
Next token is token ')' ()
Shifting token ')' ()
Entering state 136
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 136
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 136 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 136 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 136 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 136 69 90 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 136 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 136 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 136 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 136 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 136 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 136 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 147
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 55 85 113 136 147
Reading a token
Next token is token T_ID ()
Reducing stack by rule 42 (line 220):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm if_cmd ()
Entering state 65
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 65
Reducing stack by rule 24 (line 174):
   $1 = nterm if_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 69 90 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 69 90 119
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 69 90 119 104
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 69 90 119 104 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 69 90 119 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 69 90 119 104 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 69 90 119 104 130
Next token is token ';' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 149
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 56 86 115 138 149
Reducing stack by rule 44 (line 227):
   $1 = token "iterate" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm iterate_cmd ()
Entering state 66
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 66
Reducing stack by rule 25 (line 175):
   $1 = nterm iterate_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '[' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Next token is token '[' ()
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 70
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70
Next token is token '[' ()
Shifting token '[' ()
Entering state 92
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 76
Reading a token
Next token is token ']' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 81
Next token is token ']' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 121
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 121
Next token is token ']' ()
Shifting token ']' ()
Entering state 143
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 70 92 121 143
Reducing stack by rule 50 (line 246):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token ';' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 48
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 48
Reading a token
Next token is token '=' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 69
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69
Next token is token '=' ()
Shifting token '=' ()
Entering state 90
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90
Reading a token
Next token is token T_ID ()
Shifting token T_ID ()
Entering state 76
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 76
Reading a token
Next token is token '+' ()
Reducing stack by rule 48 (line 242):
   $1 = token T_ID ()
-> $$ = nterm lvalue ()
Entering state 79
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 79
Reducing stack by rule 76 (line 288):
   $1 = nterm lvalue ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 81
Next token is token '+' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token '+' ()
Shifting token '+' ()
Entering state 104
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104
Reading a token
Next token is token T_INT_LITERAL ()
Shifting token T_INT_LITERAL ()
Entering state 45
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 45
Reducing stack by rule 77 (line 289):
   $1 = token T_INT_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 71
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 71
Reducing stack by rule 72 (line 281):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 81
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 81
Reading a token
Next token is token ';' ()
Reducing stack by rule 59 (line 265):
   $1 = nterm postfix_expression ()
-> $$ = nterm expression ()
Entering state 130
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 104 130
Next token is token ';' ()
Reducing stack by rule 67 (line 273):
   $1 = nterm expression ()
   $2 = token '+' ()
   $3 = nterm expression ()
-> $$ = nterm expression ()
Entering state 119
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 142
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 69 90 119 142
Reducing stack by rule 47 (line 238):
   $1 = nterm lvalue ()
   $2 = token '=' ()
   $3 = nterm expression ()
   $4 = token ';' ()
-> $$ = nterm assign_cmd ()
Entering state 68
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 68
Reducing stack by rule 23 (line 173):
   $1 = nterm assign_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 62
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 62
Reducing stack by rule 26 (line 176):
   $1 = nterm block ()
-> $$ = nterm command ()
Entering state 149
Stack now 0 2 4 9 12 17 29 37 42 56 86 115 138 149
Reducing stack by rule 44 (line 227):
   $1 = token "iterate" ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm command ()
-> $$ = nterm iterate_cmd ()
Entering state 66
Stack now 0 2 4 9 12 17 29 37 42 66
Reducing stack by rule 25 (line 175):
   $1 = nterm iterate_cmd ()
-> $$ = nterm command ()
Entering state 60
Stack now 0 2 4 9 12 17 29 37 42 60
Reducing stack by rule 21 (line 168):
   $1 = nterm command_list ()
   $2 = nterm command ()
-> $$ = nterm command_list ()
Entering state 42
Stack now 0 2 4 9 12 17 29 37 42
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 59
Stack now 0 2 4 9 12 17 29 37 42 59
Reducing stack by rule 35 (line 196):
   $1 = token '{' ()
   $2 = nterm command_list ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 2 4 9 12 17 29 38
Reducing stack by rule 6 (line 125):
   $1 = token T_ID ()
   $2 = token '(' ()
   $3 = nterm params ()
   $4 = token ')' ()
   $5 = nterm optional_return_types ()
   $6 = nterm block ()
-> $$ = nterm fun_def ()
Entering state 7
Stack now 0 2 7
Reducing stack by rule 4 (line 120):
   $1 = nterm fun_def ()
-> $$ = nterm def ()
Entering state 6
Stack now 0 2 6
Reducing stack by rule 3 (line 116):
   $1 = nterm def_list ()
   $2 = nterm def ()
-> $$ = nterm def_list ()
Entering state 2
Stack now 0 2
Reading a token
Now at end of input.
Reducing stack by rule 1 (line 111):
   $1 = nterm def_list ()
-> $$ = nterm program ()
Entering state 1
Stack now 0 1
Now at end of input.
Shifting token "end of file" ()
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" ()
Cleanup: popping nterm program ()
[TC] visit AssignCmdNode
[TC] RHS=Int
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=Int
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=Int
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] visit NewExprNode
[TC] RHS=Array[Int]
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=Int
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=Int
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=Int
[TC] LHS(var)=‹unknown›
[TC] visit AssignCmdNode
[TC] RHS=Int
[TC] LHS(var)=‹unknown›
[TC] fun main returns []
[TC] fun printArr returns []
[TC] fun readArr returns []
[TC] fun sort returns []
[TRACE] CallCmd main
[TRACE] IntLiteral 0
[TRACE] visit NewExprNode
[TRACE] NewExpr start
[TRACE] IntLiteral 10
[TRACE] New primitive array size=10
[TRACE] CallCmd readArr
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] IntLiteral 10
[TRACE] IntLiteral 0
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess x
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess x
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess x
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess x
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess x
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess x
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess x
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess x
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess x
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess x
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CallCmd printArr
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] IntLiteral 10
[TRACE] CharLiteral {
{[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] IntLiteral 0
[TRACE] Array elem: Int
0[TRACE] IntLiteral 1
[TRACE] BinaryOp op=-
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral }
}[TRACE] CharLiteral 


[TRACE] CallCmd sort
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] IntLiteral 10
[TRACE] IntLiteral 0
[TRACE] IntLiteral 0
[TRACE] IntLiteral 0
[TRACE] IntLiteral 0
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=-
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] VarAccess aux
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=-
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] VarAccess aux
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=-
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] VarAccess aux
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=-
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] VarAccess aux
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=-
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] VarAccess aux
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=-
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] VarAccess aux
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=-
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] VarAccess aux
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=-
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] VarAccess aux
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=-
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] BinaryOp op=<
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] VarAccess aux
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] BinaryOp op=-
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] VarAccess j
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] Array elem: Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] VarAccess aux
[TRACE] VarValue Int
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] VarAccess k
[TRACE] VarValue Int
[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CallCmd printArr
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] IntLiteral 10
[TRACE] CharLiteral {
{[TRACE] BinaryOp op=<
[TRACE] IntLiteral 0
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] IntLiteral 0
[TRACE] Array elem: Int
0[TRACE] IntLiteral 1
[TRACE] BinaryOp op=-
[TRACE] VarAccess sz
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral ,
,[TRACE] visit ArrayAccessNode
[TRACE] VarAccess v
[TRACE] VarValue Array
[TRACE] Array expr value: Array
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] Array elem: Int
0[TRACE] BinaryOp op=+
[TRACE] VarAccess i
[TRACE] VarValue Int
[TRACE] IntLiteral 1
[TRACE] CharLiteral }
}[TRACE] CharLiteral 



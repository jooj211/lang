#!/bin/bash

# ==============================================================================
# Script para Testar a An√°lise Sem√¢ntica (Casos de Erro)
# ==============================================================================
# Este script executa o compilador com a flag -i para todos os arquivos
# em um diret√≥rio de testes que deveriam falhar. Um teste passa se o
# compilador retornar um c√≥digo de sa√≠da de erro (diferente de 0).
# ==============================================================================

# --- CONFIGURA√á√ïES ---
# Altere esta vari√°vel para o caminho correto do seu execut√°vel compilado.
COMPILER_PATH="./build/lang" 
# Diret√≥rio contendo os casos de teste que devem FALHAR.
TEST_DIR="instances/types/errado"


# --- CORES PARA A SA√çDA ---
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # Sem Cor

# --- INICIALIZA√á√ÉO ---
passed_count=0
total_count=0

# Valida√ß√µes iniciais (compilador e diret√≥rio)
if [ ! -x "$COMPILER_PATH" ]; then
    echo -e "${RED}Erro: Compilador n√£o encontrado ou n√£o √© execut√°vel em '$COMPILER_PATH'.${NC}"
    exit 1
fi

if [ ! -d "$TEST_DIR" ]; then
    echo -e "${RED}Erro: Diret√≥rio de testes '$TEST_DIR' n√£o encontrado.${NC}"
    exit 1
fi

# --- EXECU√á√ÉO DOS TESTES ---
echo -e "${YELLOW}Iniciando testes de erro sem√¢ntico para a pasta '$TEST_DIR'...${NC}"
echo "----------------------------------------------------------------------"

# Itera sobre todos os arquivos no diret√≥rio de teste
for test_file in "$TEST_DIR"/*; do
    if [ -f "$test_file" ]; then
        ((total_count++))

        # Executa o compilador, redirecionando toda a sa√≠da para o "buraco negro" (/dev/null)
        # para manter a tela limpa. O que nos importa √© o c√≥digo de sa√≠da.
        "$COMPILER_PATH" -i "$test_file" &> /dev/null
        exit_code=$? # Captura o c√≥digo de sa√≠da do √∫ltimo comando executado

        # Para estes testes, um C√ìDIGO DE SA√çDA DIFERENTE DE 0 significa SUCESSO.
        if [ $exit_code -ne 0 ]; then
            ((passed_count++))
            printf "${GREEN}%-10s${NC} ‚úî %s (Compilador rejeitou corretamente)\n" "[PASSOU]" "$test_file"
        else
            # Se o c√≥digo de sa√≠da for 0, o compilador aceitou um programa inv√°lido.
            printf "${RED}%-10s${NC} ‚úñ %s (Compilador aceitou incorretamente)\n" "[FALHOU]" "$test_file"
        fi
    fi
done

# --- SUM√ÅRIO ---
echo "----------------------------------------------------------------------"
echo -e "${YELLOW}Testes finalizados.${NC}\n"
echo -e "Resumo: ${GREEN}$passed_count${NC} de ${YELLOW}$total_count${NC} testes de erro foram validados com sucesso."
echo ""

# Mensagem final
if [ "$passed_count" -eq "$total_count" ]; then
    echo -e "${GREEN}üéâ Perfeito! Todos os programas inv√°lidos foram corretamente rejeitados.${NC}"
else
    echo -e "${RED}‚ö†Ô∏è Aten√ß√£o: O compilador aceitou alguns programas que deveriam ter falhado.${NC}"
fi